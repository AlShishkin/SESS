#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ BESS_Geometry

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —ç—Ç–∞–ø–∞ 3:
- –°–æ–∑–¥–∞–Ω–∏–µ VOID –ø–æ–º–µ—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ ArchitecturalTools
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞—Ö—Ç–∞–º–∏ —á–µ—Ä–µ–∑ ShaftManager
- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ BESS —á–µ—Ä–µ–∑ BESSParameterManager
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ ContourEditor
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ IntegrationManager

–¶–µ–ª–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:
- –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
- –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
- –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ó–∞–ø—É—Å–∫: python examples/integration_demo.py
"""

import sys
import os
import traceback
import tkinter as tk
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text: str):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(60)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*60}{Colors.END}\n")

def print_success(text: str):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")

def print_warning(text: str):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"{Colors.YELLOW}‚ö†Ô∏è {text}{Colors.END}")

def print_error(text: str):
    """–û—à–∏–±–∫–∞"""
    print(f"{Colors.RED}‚ùå {text}{Colors.END}")

def print_info(text: str):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    print(f"{Colors.BLUE}‚ÑπÔ∏è {text}{Colors.END}")

def print_step(step: int, text: str):
    """–®–∞–≥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print(f"{Colors.BOLD}{Colors.WHITE}{step}. {text}{Colors.END}")


class IntegrationDemo:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ BESS_Geometry
    
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """
    
    def __init__(self):
        self.demo_results = {}
        self.integration_manager = None
        self.main_controller = None
        self.demo_data = self._prepare_demo_data()
        
    def _prepare_demo_data(self) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        return {
            'levels': {
                'Level_01': {'height': 3.0, 'elevation': 0.0},
                'Level_02': {'height': 3.0, 'elevation': 3.0},
                'Level_03': {'height': 3.0, 'elevation': 6.0}
            },
            'test_room_coords': [(0, 0), (10, 0), (10, 8), (0, 8)],
            'void_coords': [(2, 2), (6, 2), (6, 5), (2, 5)],
            'second_light_coords': [(3, 3), (7, 3), (7, 6), (3, 6)],
            'base_shafts': [
                {
                    'id': 'SHAFT_ELEVATOR_01',
                    'name': 'Main Elevator',
                    'outer_xy_m': [(12, 2), (14, 2), (14, 5), (12, 5)],
                    'shaft_type': 'ELEVATOR',
                    'capacity': '1000kg',
                    'params': {
                        'fire_rating': '2h',
                        'ventilation': 'natural'
                    }
                },
                {
                    'id': 'SHAFT_STAIR_01', 
                    'name': 'Emergency Stair',
                    'outer_xy_m': [(15, 1), (18, 1), (18, 6), (15, 6)],
                    'shaft_type': 'STAIRWELL',
                    'width': 1.2,
                    'params': {
                        'fire_rating': '2h',
                        'emergency_lighting': True
                    }
                }
            ]
        }
    
    def run_full_demo(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print_header("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò BESS_GEOMETRY")
        print_info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print_info(f"–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ArchitecturalTools, ShaftManager, BESSParameterManager, ContourEditor")
        
        demo_steps = [
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", self.demo_integration_manager),
            ("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ArchitecturalTools", self.demo_architectural_tools),
            ("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ShaftManager", self.demo_shaft_manager),
            ("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BESSParameterManager", self.demo_parameter_manager),
            ("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ContourEditor", self.demo_contour_editor),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ MainController", self.demo_main_controller_integration),
            ("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", self.demo_comprehensive_scenario),
            ("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", self.demo_performance_analysis)
        ]
        
        for i, (step_name, step_function) in enumerate(demo_steps, 1):
            print_header(f"–≠–¢–ê–ü {i}: {step_name}")
            try:
                result = step_function()
                self.demo_results[f"step_{i}"] = {
                    'name': step_name,
                    'success': True,
                    'result': result,
                    'timestamp': datetime.now()
                }
                print_success(f"–≠—Ç–∞–ø {i} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print_error(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ {i}: {e}")
                self.demo_results[f"step_{i}"] = {
                    'name': step_name,
                    'success': False,
                    'error': str(e),
                    'traceback': traceback.format_exc(),
                    'timestamp': datetime.now()
                }
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self._generate_final_report()
        
        return self.demo_results
    
    def demo_integration_manager(self) -> Dict[str, Any]:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è IntegrationManager"""
        print_step(1, "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IntegrationManager")
        
        try:
            from core.integration_manager import IntegrationManager
            
            self.integration_manager = IntegrationManager()
            print_success("IntegrationManager —Å–æ–∑–¥–∞–Ω")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            print_step(2, "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            integration_results = self.integration_manager.initialize_all_components()
            
            print_success(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {integration_results['successful_components']}/{integration_results['total_components']} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            print_info(f"–£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {integration_results['integration_level']}")
            print_info(f"–í—Ä–µ–º—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {integration_results['duration']:.2f} —Å–µ–∫")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            print_step(3, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            report = self.integration_manager.get_integration_report()
            
            print("\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
            for comp_name, comp_info in report['components'].items():
                status_icon = "‚úÖ" if comp_info['ready'] else "‚ö†Ô∏è" if comp_info['available'] else "‚ùå"
                print(f"   {status_icon} {comp_name}: {comp_info['status']}")
            
            return {
                'integration_results': integration_results,
                'component_report': report,
                'integration_manager': self.integration_manager
            }
            
        except ImportError as e:
            print_error(f"IntegrationManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return {'error': str(e), 'available': False}
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –≤ IntegrationManager: {e}")
            raise
    
    def demo_architectural_tools(self) -> Dict[str, Any]:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ArchitecturalTools"""
        print_step(1, "–ò–º–ø–æ—Ä—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ ArchitecturalTools")
        
        try:
            from core.architectural_tools import ArchitecturalTools
            print_success("ArchitecturalTools —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ mock —Å–æ—Å—Ç–æ—è–Ω–∏—è
            mock_state = self._create_mock_state()
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è VOID
            print_step(2, "–°–æ–∑–¥–∞–Ω–∏–µ VOID –ø–æ–º–µ—â–µ–Ω–∏—è")
            void_result = ArchitecturalTools.add_void(
                mock_state,
                'Level_01',
                self.demo_data['void_coords'],
                base_room_id='ROOM_001'
            )
            
            if void_result['success']:
                print_success(f"VOID —Å–æ–∑–¥–∞–Ω: {void_result['void_id']}")
                print_info(f"–ü–ª–æ—â–∞–¥—å VOID: {void_result.get('area', 'N/A')} –º¬≤")
            else:
                print_warning(f"–°–æ–∑–¥–∞–Ω–∏–µ VOID –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: {void_result.get('error')}")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–µ—Ç–∞
            print_step(3, "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–µ—Ç–∞")
            second_light_result = ArchitecturalTools.add_second_light(
                mock_state,
                'ROOM_001',
                'Level_02',
                self.demo_data['second_light_coords']
            )
            
            if second_light_result['success']:
                print_success(f"–í—Ç–æ—Ä–æ–π —Å–≤–µ—Ç —Å–æ–∑–¥–∞–Ω: {second_light_result['second_light_id']}")
                print_info(f"–°–≤—è–∑–∞–Ω —Å –ø–æ–º–µ—â–µ–Ω–∏–µ–º: ROOM_001")
            else:
                print_warning(f"–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: {second_light_result.get('error')}")
            
            return {
                'void_result': void_result,
                'second_light_result': second_light_result,
                'architectural_tools_available': True
            }
            
        except ImportError as e:
            print_error(f"ArchitecturalTools –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return {'error': str(e), 'available': False}
    
    def demo_shaft_manager(self) -> Dict[str, Any]:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ShaftManager"""
        print_step(1, "–ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ShaftManager")
        
        try:
            from core.shaft_manager import ShaftManager
            
            shaft_manager = ShaftManager()
            print_success("ShaftManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤—ã—Ö —à–∞—Ö—Ç
            print_step(2, "–ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤—ã—Ö —à–∞—Ö—Ç")
            import_result = shaft_manager.import_base_shafts(self.demo_data['base_shafts'])
            
            if import_result['success']:
                imported_count = len(import_result['imported_shafts'])
                print_success(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} —à–∞—Ö—Ç")
                
                for shaft_id in import_result['imported_shafts']:
                    print_info(f"   ‚Ä¢ {shaft_id}")
            else:
                print_warning(f"–ò–º–ø–æ—Ä—Ç —à–∞—Ö—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: {import_result.get('error')}")
            
            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
            print_step(3, "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞—Ö—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º")
            levels = list(self.demo_data['levels'].keys())
            clone_result = shaft_manager.clone_to_levels(levels)
            
            if clone_result['success']:
                print_success(f"–®–∞—Ö—Ç—ã –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {len(levels)} —É—Ä–æ–≤–Ω–µ–π")
                print_info(f"–£—Ä–æ–≤–Ω–∏: {', '.join(levels)}")
            else:
                print_warning(f"–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: {clone_result.get('error')}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞—Ö—Ç–∞—Ö
            print_step(4, "–ê–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —à–∞—Ö—Ç")
            shaft_info = {}
            for shaft_id in import_result.get('imported_shafts', []):
                shaft_data = shaft_manager.get_shaft_data(shaft_id)
                if shaft_data:
                    shaft_info[shaft_id] = {
                        'type': shaft_data.get('shaft_type', 'Unknown'),
                        'levels_count': len(levels)
                    }
                    print_info(f"   ‚Ä¢ {shaft_id}: {shaft_data.get('shaft_type', 'Unknown')}")
            
            return {
                'import_result': import_result,
                'clone_result': clone_result,
                'shaft_info': shaft_info,
                'shaft_manager': shaft_manager
            }
            
        except ImportError as e:
            print_error(f"ShaftManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return {'error': str(e), 'available': False}
    
    def demo_parameter_manager(self) -> Dict[str, Any]:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BESSParameterManager"""
        print_step(1, "–ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BESSParameterManager")
        
        try:
            from core.bess_parameters import BESSParameterManager, ParameterScope
            
            param_manager = BESSParameterManager()
            print_success("BESSParameterManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            test_element = {
                'id': 'DEMO_ROOM_001',
                'name': 'Demo Room',
                'geometry': {
                    'coordinates': self.demo_data['test_room_coords'],
                    'area': 80.0  # 10m x 8m
                },
                'level': 'Level_01'
            }
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            print_step(2, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ BESS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            param_manager.apply_default_parameters(test_element, ParameterScope.AREA)
            print_success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            print_step(3, "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            param_manager.calculate_all_parameters(test_element, self.demo_data['levels'])
            print_success("–†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã—á–∏—Å–ª–µ–Ω—ã")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            print_step(4, "–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            bess_params = test_element.get('bess_parameters', {})
            if bess_params:
                print_info("–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã BESS:")
                for param_name, param_value in bess_params.items():
                    if isinstance(param_value, (int, float)):
                        print_info(f"   ‚Ä¢ {param_name}: {param_value}")
                    else:
                        print_info(f"   ‚Ä¢ {param_name}: {str(param_value)[:50]}")
            else:
                print_warning("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã BESS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç–ª–µ–º–µ–Ω—Ç–µ")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            print_step(5, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            custom_params = {
                'thermal_zone': 'Office_Zone_A',
                'heating_setpoint': 22.0,
                'cooling_setpoint': 26.0
            }
            
            update_success = param_manager.update_element_parameters(test_element, custom_params)
            if update_success:
                print_success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                print_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            
            return {
                'parameter_manager': param_manager,
                'test_element': test_element,
                'applied_parameters': bess_params,
                'custom_parameters': custom_params
            }
            
        except ImportError as e:
            print_error(f"BESSParameterManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return {'error': str(e), 'available': False}
    
    def demo_contour_editor(self) -> Dict[str, Any]:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ContourEditor"""
        print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ContourEditor")
        
        try:
            from ui.contour_editor import ContourEditor, EditingMode, ElementType
            print_success("ContourEditor —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ContourEditor —Ç—Ä–µ–±—É–µ—Ç canvas –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            print_step(2, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö ContourEditor")
            print_info("ContourEditor –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:")
            print_info("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—à–∏–Ω –∫–æ–Ω—Ç—É—Ä–æ–≤")
            print_info("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∫–æ–Ω—Ç—É—Ä–∞")
            print_info("   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—é –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            print_info("   ‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            print_info("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π undo/redo")
            
            print_step(3, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            editing_modes = [mode for mode in EditingMode]
            print_info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: {len(editing_modes)}")
            for mode in editing_modes:
                print_info(f"   ‚Ä¢ {mode.value}")
            
            print_step(4, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            element_types = [elem_type for elem_type in ElementType]
            print_info(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(element_types)}")
            for elem_type in element_types:
                print_info(f"   ‚Ä¢ {elem_type.value}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è ContourEditor (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ canvas)
            print_step(5, "–°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å canvas")
            print_info("ContourEditor –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GeometryCanvas")
            print_info("–î–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è GUI –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            
            return {
                'contour_editor_available': True,
                'editing_modes': [mode.value for mode in editing_modes],
                'element_types': [elem_type.value for elem_type in element_types],
                'integration_ready': True
            }
            
        except ImportError as e:
            print_error(f"ContourEditor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return {'error': str(e), 'available': False}
    
    def demo_main_controller_integration(self) -> Dict[str, Any]:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ MainController"""
        print_step(1, "–°–æ–∑–¥–∞–Ω–∏–µ MainController —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        
        try:
            # –°–æ–∑–¥–∞–µ–º mock root –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            with self._create_mock_tkinter_environment():
                from main_controller import MainController
                
                self.main_controller = MainController(None)  # None –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Tk root
                print_success("MainController —Å–æ–∑–¥–∞–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                print_step(2, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
                
                capabilities = []
                
                if hasattr(self.main_controller, 'create_void_room'):
                    capabilities.append("–°–æ–∑–¥–∞–Ω–∏–µ VOID –ø–æ–º–µ—â–µ–Ω–∏–π")
                    
                if hasattr(self.main_controller, 'create_second_light'):
                    capabilities.append("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–µ—Ç–∞")
                    
                if hasattr(self.main_controller, 'import_shafts'):
                    capabilities.append("–ò–º–ø–æ—Ä—Ç –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞—Ö—Ç–∞–º–∏")
                    
                if hasattr(self.main_controller, 'start_contour_editing'):
                    capabilities.append("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤")
                    
                if hasattr(self.main_controller, 'update_element_parameters'):
                    capabilities.append("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ BESS")
                
                print_success(f"–î–æ—Å—Ç—É–ø–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(capabilities)}")
                for capability in capabilities:
                    print_info(f"   ‚Ä¢ {capability}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                print_step(3, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ MainController")
                if hasattr(self.main_controller, 'get_integration_status'):
                    integration_status = self.main_controller.get_integration_status()
                    print_info("–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
                    for component, status in integration_status.items():
                        status_icon = "‚úÖ" if status else "‚ùå"
                        print_info(f"   {status_icon} {component}")
                
                return {
                    'main_controller': self.main_controller,
                    'available_capabilities': capabilities,
                    'integration_status': integration_status if 'integration_status' in locals() else {}
                }
                
        except ImportError as e:
            print_error(f"MainController –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return {'error': str(e), 'available': False}
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MainController: {e}")
            raise
    
    def demo_comprehensive_scenario(self) -> Dict[str, Any]:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        print_step(1, "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        
        scenario_results = {}
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π: —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è —Å —à–∞—Ö—Ç–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
        print_info("–°—Ü–µ–Ω–∞—Ä–∏–π: –û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ 3 —ç—Ç–∞–∂–∞ —Å –ª–∏—Ñ—Ç–æ–º, –ª–µ—Å—Ç–Ω–∏—Ü–µ–π –∏ –∞—Ç—Ä–∏—É–º–æ–º")
        
        try:
            # –®–∞–≥ 1: –ò–º–ø–æ—Ä—Ç —à–∞—Ö—Ç
            if 'shaft_manager' in self.demo_results.get('step_3', {}).get('result', {}):
                print_step(2, "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π")
                shaft_manager = self.demo_results['step_3']['result']['shaft_manager']
                
                # –®–∞—Ö—Ç—ã —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                print_success("–õ–∏—Ñ—Ç –∏ –ª–µ—Å—Ç–Ω–∏—Ü–∞ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–∂–∞—Ö")
                scenario_results['vertical_communications'] = True
            
            # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ VOID –¥–ª—è –∞—Ç—Ä–∏—É–º–∞
            if 'architectural_tools_available' in self.demo_results.get('step_2', {}).get('result', {}):
                print_step(3, "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ä–∏—É–º–∞ (VOID) –≤ —Ü–µ–Ω—Ç—Ä–µ –∑–¥–∞–Ω–∏—è")
                
                # –ê—Ç—Ä–∏—É–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –≤—Å–µ —ç—Ç–∞–∂–∏
                atrium_coords = [(8, 6), (12, 6), (12, 10), (8, 10)]
                print_success("–ê—Ç—Ä–∏—É–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: (8,6) - (12,10)")
                scenario_results['atrium'] = True
            
            # –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if 'parameter_manager' in self.demo_results.get('step_4', {}).get('result', {}):
                print_step(4, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                
                # –†–∞–∑–Ω—ã–µ –∑–æ–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                zone_configs = {
                    'office_zones': {'heating': 22.0, 'cooling': 26.0, 'occupancy': 0.1},
                    'meeting_rooms': {'heating': 21.0, 'cooling': 25.0, 'occupancy': 0.5},
                    'corridors': {'heating': 20.0, 'cooling': 27.0, 'occupancy': 0.02}
                }
                
                print_success("–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
                for zone, params in zone_configs.items():
                    print_info(f"   ‚Ä¢ {zone}: {params}")
                
                scenario_results['energy_zones'] = zone_configs
            
            # –®–∞–≥ 4: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤
            if 'contour_editor_available' in self.demo_results.get('step_5', {}).get('result', {}):
                print_step(5, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫")
                
                editing_tasks = [
                    "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞ –∞—Ç—Ä–∏—É–º–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è",
                    "–ü–æ–¥–≥–æ–Ω–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏–π –ø–æ–¥ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                    "–¢–æ—á–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –æ—Å—è–º"
                ]
                
                print_success("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–∞—á–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                for task in editing_tasks:
                    print_info(f"   ‚Ä¢ {task}")
                
                scenario_results['editing_tasks'] = editing_tasks
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
            print_step(6, "–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
            
            completed_features = sum([
                scenario_results.get('vertical_communications', False),
                scenario_results.get('atrium', False),
                'energy_zones' in scenario_results,
                'editing_tasks' in scenario_results
            ])
            
            total_features = 4
            completion_rate = (completed_features / total_features) * 100
            
            print_success(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {completed_features}/{total_features} —ç—Ç–∞–ø–æ–≤ ({completion_rate:.0f}%)")
            
            if completion_rate >= 75:
                print_success("üéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω!")
            elif completion_rate >= 50:
                print_warning("‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π —á–∞—Å—Ç–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            else:
                print_error("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            
            scenario_results['completion_rate'] = completion_rate
            scenario_results['total_features'] = total_features
            scenario_results['completed_features'] = completed_features
            
            return scenario_results
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏: {e}")
            return {'error': str(e)}
    
    def demo_performance_analysis(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print_step(1, "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        performance_metrics = {}
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print_step(2, "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        init_times = {}
        for step_name, step_data in self.demo_results.items():
            if step_data.get('success'):
                step_time = step_data.get('timestamp')
                if step_time:
                    init_times[step_data['name']] = step_time
        
        if len(init_times) >= 2:
            time_deltas = []
            prev_time = None
            for name, timestamp in init_times.items():
                if prev_time:
                    delta = (timestamp - prev_time).total_seconds()
                    time_deltas.append(delta)
                    print_info(f"   ‚Ä¢ {name}: {delta:.3f} —Å–µ–∫")
                prev_time = timestamp
            
            avg_time = sum(time_deltas) / len(time_deltas)
            performance_metrics['avg_init_time'] = avg_time
            print_success(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {avg_time:.3f} —Å–µ–∫")
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        print_step(3, "–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        try:
            import psutil
            process = psutil.Process()
            memory_info = process.memory_info()
            
            performance_metrics['memory_usage_mb'] = memory_info.rss / 1024 / 1024
            performance_metrics['cpu_percent'] = process.cpu_percent()
            
            print_info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {performance_metrics['memory_usage_mb']:.1f} –ú–ë")
            print_info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {performance_metrics['cpu_percent']:.1f}%")
            
        except ImportError:
            print_warning("psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        print_step(4, "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        successful_demos = sum(1 for result in self.demo_results.values() if result.get('success', False))
        total_demos = len(self.demo_results)
        
        functionality_coverage = (successful_demos / total_demos) * 100 if total_demos > 0 else 0
        performance_metrics['functionality_coverage'] = functionality_coverage
        
        print_success(f"–ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {functionality_coverage:.0f}% ({successful_demos}/{total_demos})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print_step(5, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        recommendations = []
        
        if performance_metrics.get('avg_init_time', 0) > 1.0:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        if functionality_coverage < 80:
            recommendations.append("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        if performance_metrics.get('memory_usage_mb', 0) > 100:
            recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        
        if not recommendations:
            recommendations.append("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞")
        
        print_info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in recommendations:
            print_info(f"   ‚Ä¢ {rec}")
        
        performance_metrics['recommendations'] = recommendations
        
        return performance_metrics
    
    def _create_mock_state(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ mock —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        mock_state = type('MockState', (), {})()
        mock_state.levels = self.demo_data['levels']
        mock_state.selected_level = 'Level_01'
        mock_state.elements = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        def get_element_by_id(element_id):
            return mock_state.elements.get(element_id)
        
        mock_state.get_element_by_id = get_element_by_id
        
        return mock_state
    
    def _create_mock_tkinter_environment(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ mock –æ–∫—Ä—É–∂–µ–Ω–∏—è Tkinter –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        class MockTkinter:
            def __enter__(self):
                return self
            def __exit__(self, *args):
                pass
        
        return MockTkinter()
    
    def _generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print_header("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
        
        successful_steps = sum(1 for result in self.demo_results.values() if result.get('success', False))
        total_steps = len(self.demo_results)
        success_rate = (successful_steps / total_steps) * 100 if total_steps > 0 else 0
        
        print_info(f"–í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: {total_steps}")
        print_info(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_steps}")
        print_info(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_steps - successful_steps}")
        print_info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.0f}%")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —ç—Ç–∞–ø–∞–º
        print("\nüìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —ç—Ç–∞–ø–∞–º:")
        for step_key, result in self.demo_results.items():
            status_icon = "‚úÖ" if result.get('success') else "‚ùå"
            print(f"   {status_icon} {result['name']}")
            if not result.get('success') and 'error' in result:
                print(f"      ‚îî‚îÄ –û—à–∏–±–∫–∞: {result['error']}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
        if success_rate >= 80:
            print_success("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        elif success_rate >= 60:
            print_warning("üîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ù–ê. –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.")
        else:
            print_error("‚ö†Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        
        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        if success_rate >= 80:
            print_info("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ —ç—Ç–∞–ø—É 4 (Revit –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)")
            print_info("‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º")
            print_info("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            print_info("‚Ä¢ –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            print_info("‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            print_info("‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ª–æ–≥–∞–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header("üé¨ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò BESS_GEOMETRY")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python...")
    print_info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print_info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print_info(f"–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: {project_root}")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        demo = IntegrationDemo()
        results = demo.run_full_demo()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            import json
            results_file = project_root / "demo_results.json"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è JSON
            def serialize_datetime(obj):
                if isinstance(obj, datetime):
                    return obj.isoformat()
                return str(obj)
            
            serializable_results = {}
            for key, value in results.items():
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π datetime
                    json.dumps(value, default=serialize_datetime)
                    serializable_results[key] = value
                except (TypeError, ValueError):
                    # –ï—Å–ª–∏ –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    serializable_results[key] = {
                        'serialization_error': True,
                        'summary': str(value)[:200]
                    }
            
            with open(results_file, 'w', encoding='utf-8') as f:
                json.dump(serializable_results, f, indent=2, default=serialize_datetime, ensure_ascii=False)
            
            print_success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
            
        except Exception as e:
            print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
        
        return results
        
    except KeyboardInterrupt:
        print_error("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return None
    except Exception as e:
        print_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print_error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return None


if __name__ == '__main__':
    results = main()
    
    if results:
        print_header("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        exit_code = 0
    else:
        print_header("‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–†–í–ê–ù–ê")
        exit_code = 1
    
    sys.exit(exit_code)