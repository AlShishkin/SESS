# -*- coding: utf-8 -*-
"""
io_bess.py - –ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ BESS —Ñ–∞–π–ª–æ–≤

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ –≤ –≠–¢–ê–ü 1.
–°–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ BESS JSON —Ñ–∞–π–ª–æ–≤.

–≠–¢–ê–ü 1: –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è render_bess_data()
"""

import json
from typing import Dict, List, Tuple, Any

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü
FT_TO_M = 0.3048
FT2_TO_M2 = FT_TO_M * FT_TO_M


def r2(x):
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π"""
    try:
        return round(float(x), 2)
    except (TypeError, ValueError):
        return 0.0


def load_bess_export(path: str) -> Tuple[Dict, Dict, List, List, List, Dict]:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ BESS —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
    
    –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≠–¢–ê–ü 1. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BESS JSON.
    
    Args:
        path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        
    Returns:
        Tuple: (meta, levels, rooms, areas, openings, shafts)
    """
    print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ BESS —Ñ–∞–π–ª–∞: {path}")
    
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        print(f"‚úÖ JSON —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(str(data))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        meta = _extract_metadata(data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–Ω–∏
        levels = _extract_levels(data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        rooms = _extract_rooms(data)
        areas = _extract_areas(data)
        openings = _extract_openings(data)
        shafts = _extract_shafts(data)
        
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ: {len(rooms)} –ø–æ–º–µ—â–µ–Ω–∏–π, {len(areas)} –æ–±–ª–∞—Å—Ç–µ–π, {len(openings)} –æ—Ç–≤–µ—Ä—Å—Ç–∏–π")
        
        return meta, levels, rooms, areas, openings, shafts
        
    except FileNotFoundError:
        raise Exception(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    except json.JSONDecodeError as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BESS —Ñ–∞–π–ª–∞: {e}")


def _extract_metadata(data: Dict) -> Dict:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    meta = {
        "version": data.get("version", "bess-export-1.0"),
        "units": "Meters",
        "timestamp": data.get("timestamp", ""),
        "source": data.get("source", ""),
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    if "project" in data:
        meta["project"] = data["project"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    if "filters" in data:
        meta["filters"] = data["filters"]
    
    return meta


def _extract_levels(data: Dict) -> Dict:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –∑–¥–∞–Ω–∏—è"""
    levels = {}
    
    raw_levels = data.get("levels", {})
    
    if isinstance(raw_levels, dict):
        # –§–æ—Ä–º–∞—Ç: {"Level 1": 0.0, "Level 2": 3.5, ...}
        for name, elevation in raw_levels.items():
            try:
                levels[str(name)] = float(elevation)
            except (TypeError, ValueError):
                levels[str(name)] = 0.0
                
    elif isinstance(raw_levels, list):
        # –§–æ—Ä–º–∞—Ç: [{"name": "Level 1", "elevation_m": 0.0}, ...]
        for item in raw_levels:
            if isinstance(item, dict):
                name = item.get("name", f"Level_{len(levels)+1}")
                elevation = item.get("elevation_m", item.get("elevation", 0.0))
                
                try:
                    levels[str(name)] = float(elevation)
                except (TypeError, ValueError):
                    levels[str(name)] = 0.0
    
    # –ï—Å–ª–∏ —É—Ä–æ–≤–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not levels:
        levels["Level 1"] = 0.0
    
    print(f"üè¢ –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: {list(levels.keys())}")
    return levels


def _extract_rooms(data: Dict) -> List[Dict]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏–π"""
    rooms = []
    
    raw_rooms = data.get("rooms", [])
    if not isinstance(raw_rooms, list):
        return rooms
    
    for i, room_data in enumerate(raw_rooms):
        try:
            room = _normalize_element(room_data, f"Room_{i+1}", "room")
            if room:
                rooms.append(room)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–º–µ—â–µ–Ω–∏—è {i}: {e}")
    
    return rooms


def _extract_areas(data: Dict) -> List[Dict]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π"""
    areas = []
    
    raw_areas = data.get("areas", [])
    if not isinstance(raw_areas, list):
        return areas
    
    for i, area_data in enumerate(raw_areas):
        try:
            area = _normalize_element(area_data, f"Area_{i+1}", "area")
            if area:
                areas.append(area)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–ª–∞—Å—Ç–∏ {i}: {e}")
    
    return areas


def _extract_openings(data: Dict) -> List[Dict]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π"""
    openings = []
    
    raw_openings = data.get("openings", [])
    if not isinstance(raw_openings, list):
        return openings
    
    for i, opening_data in enumerate(raw_openings):
        try:
            opening = _normalize_element(opening_data, f"Opening_{i+1}", "opening")
            if opening:
                openings.append(opening)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è {i}: {e}")
    
    return openings


def _extract_shafts(data: Dict) -> Dict:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —à–∞—Ö—Ç (–ø–æ —É—Ä–æ–≤–Ω—è–º)"""
    shafts_by_level = {}
    
    raw_shafts = data.get("shafts", [])
    if not isinstance(raw_shafts, list):
        return shafts_by_level
    
    for i, shaft_data in enumerate(raw_shafts):
        try:
            shaft = _normalize_element(shaft_data, f"Shaft_{i+1}", "shaft")
            if shaft:
                level = shaft.get("params", {}).get("BESS_level", "Level 1")
                if level not in shafts_by_level:
                    shafts_by_level[level] = []
                shafts_by_level[level].append(shaft)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞—Ö—Ç—ã {i}: {e}")
    
    return shafts_by_level


def _normalize_element(element_data: Dict, default_name: str, element_type: str) -> Dict:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    
    Args:
        element_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        default_name: –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        element_type: –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
        
    Returns:
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    """
    if not isinstance(element_data, dict):
        return None
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    element = {
        "id": element_data.get("id", default_name),
        "name": element_data.get("name", default_name),
        "element_type": element_type,
        "outer_xy_m": [],
        "inner_loops_xy_m": [],
        "params": {}
    }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
    element["outer_xy_m"] = _normalize_polygon(element_data.get("outer_xy_m", 
                                                              element_data.get("contour", 
                                                                              element_data.get("geometry", []))))
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
    inner_loops = element_data.get("inner_loops_xy_m", element_data.get("holes", []))
    if isinstance(inner_loops, list):
        element["inner_loops_xy_m"] = [_normalize_polygon(loop) for loop in inner_loops]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = element_data.get("params", {})
    if isinstance(params, dict):
        element["params"] = params.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    level = element_data.get("level", element_data.get("BESS_level", "Level 1"))
    element["params"]["BESS_level"] = level
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    for key in ["area", "area_m2", "volume", "height", "category", "type", "function"]:
        if key in element_data:
            element[key] = element_data[key]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    if len(element["outer_xy_m"]) < 3:
        print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {element['id']} –∏–º–µ–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")
        return None
    
    return element


def _normalize_polygon(raw_polygon) -> List[List[float]]:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç [[x1,y1], [x2,y2], ...]
    
    Args:
        raw_polygon: –ò—Å—Ö–æ–¥–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        
    Returns:
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω
    """
    if not raw_polygon:
        return []
    
    if not isinstance(raw_polygon, list):
        return []
    
    normalized = []
    
    for point in raw_polygon:
        if isinstance(point, (list, tuple)) and len(point) >= 2:
            try:
                x = r2(point[0])
                y = r2(point[1])
                normalized.append([x, y])
            except (TypeError, ValueError, IndexError):
                continue
        elif isinstance(point, dict):
            try:
                x = r2(point.get("x", point.get("X", 0)))
                y = r2(point.get("y", point.get("Y", 0)))
                normalized.append([x, y])
            except (TypeError, ValueError):
                continue
    
    return normalized


def save_work_geometry(path: str, meta: Dict, work_levels: Dict, work_rooms: List, 
                      work_areas: List, work_openings: List = None, work_shafts: Dict = None):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ JSON —Ñ–∞–π–ª
    
    –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≠–¢–ê–ü 1.
    
    Args:
        path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        meta: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        work_levels: –£—Ä–æ–≤–Ω–∏ –∑–¥–∞–Ω–∏—è
        work_rooms: –ü–æ–º–µ—â–µ–Ω–∏—è
        work_areas: –û–±–ª–∞—Å—Ç–∏
        work_openings: –û—Ç–≤–µ—Ä—Å—Ç–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        work_shafts: –®–∞—Ö—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {path}")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        output = {
            "version": meta.get("version", "bess-work-1.0"),
            "units": "Meters",
            "timestamp": meta.get("timestamp", ""),
            "levels": [{"name": name, "elevation_m": float(elevation)} 
                      for name, elevation in work_levels.items()],
            "rooms": _round_elements(work_rooms),
            "areas": _round_elements(work_areas)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if work_openings:
            output["openings"] = _round_elements(work_openings)
        
        if work_shafts:
            shafts_list = []
            for level, shafts in work_shafts.items():
                for shaft in shafts:
                    shaft_copy = shaft.copy()
                    shaft_copy["level"] = level
                    shafts_list.append(shaft_copy)
            output["shafts"] = _round_elements(shafts_list)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(path, "w", encoding="utf-8") as f:
            json.dump(output, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path}")
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")


def _round_elements(elements: List[Dict]) -> List[Dict]:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    rounded = []
    
    for element in elements:
        if not isinstance(element, dict):
            continue
        
        element_copy = element.copy()
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä
        if "outer_xy_m" in element_copy:
            element_copy["outer_xy_m"] = [[r2(x), r2(y)] for x, y in element_copy["outer_xy_m"]]
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
        if "inner_loops_xy_m" in element_copy:
            element_copy["inner_loops_xy_m"] = [
                [[r2(x), r2(y)] for x, y in loop] 
                for loop in element_copy["inner_loops_xy_m"]
            ]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –∫–æ—Ä–µ–Ω—å
        if "params" in element_copy and "BESS_level" in element_copy["params"]:
            element_copy["level"] = element_copy["params"]["BESS_level"]
        
        rounded.append(element_copy)
    
    return rounded


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def create_test_data() -> Tuple[Dict, Dict, List, List, List, Dict]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ render_bess_data()
    
    Returns:
        –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ BESS
    """
    meta = {
        "version": "bess-test-1.0",
        "units": "Meters",
        "project": {"name": "Test Building", "description": "Test data for –≠–¢–ê–ü 1"}
    }
    
    levels = {
        "Level 1": 0.0,
        "Level 2": 3.5
    }
    
    rooms = [
        {
            "id": "room_1",
            "name": "–û—Ñ–∏—Å 1",
            "element_type": "room",
            "outer_xy_m": [[0, 0], [5, 0], [5, 3], [0, 3], [0, 0]],
            "inner_loops_xy_m": [],
            "params": {"BESS_level": "Level 1"},
            "area_m2": 15.0
        },
        {
            "id": "room_2",
            "name": "–û—Ñ–∏—Å 2", 
            "element_type": "room",
            "outer_xy_m": [[6, 0], [10, 0], [10, 3], [6, 3], [6, 0]],
            "inner_loops_xy_m": [],
            "params": {"BESS_level": "Level 1"},
            "area_m2": 12.0
        },
        {
            "id": "room_3",
            "name": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª",
            "element_type": "room", 
            "outer_xy_m": [[0, 4], [10, 4], [10, 8], [0, 8], [0, 4]],
            "inner_loops_xy_m": [],
            "params": {"BESS_level": "Level 1"},
            "area_m2": 40.0
        }
    ]
    
    areas = []
    openings = []
    shafts = {}
    
    return meta, levels, rooms, areas, openings, shafts


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è io_bess"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ io_bess –º–æ–¥—É–ª—è")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    meta, levels, rooms, areas, openings, shafts = create_test_data()
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:")
    print(f"  ‚Ä¢ –£—Ä–æ–≤–Ω–∏: {list(levels.keys())}")
    print(f"  ‚Ä¢ –ü–æ–º–µ—â–µ–Ω–∏—è: {len(rooms)}")
    print(f"  ‚Ä¢ –û–±–ª–∞—Å—Ç–∏: {len(areas)}")
    print(f"  ‚Ä¢ –û—Ç–≤–µ—Ä—Å—Ç–∏—è: {len(openings)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    test_file = "test_bess_data.json"
    try:
        save_work_geometry(test_file, meta, levels, rooms, areas, openings, shafts)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {test_file}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        loaded_meta, loaded_levels, loaded_rooms, loaded_areas, loaded_openings, loaded_shafts = load_bess_export(test_file)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ")
        print(f"  ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–º–µ—â–µ–Ω–∏–π: {len(loaded_rooms)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")