# -*- coding: utf-8 -*-
"""
core/snap_system.py - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –∏ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è SOFT

–≠–¢–ê–ü 1.3: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –∏ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
–ü–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª _snap_world() –∏–∑ legacy sess_geometry —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –¢–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
- –û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ/–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è  
- –°–µ—Ç–∫–∞: –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π —Å–µ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –¥–æ–ø—É—Å–∫–∏: –≥–∏–±–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç—å—é
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞

–¢–∏–ø—ã –ø—Ä–∏–≤—è–∑–æ–∫ (–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ legacy):
üìç –í–µ—Ä—à–∏–Ω—ã - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–æ—á–∫–∞–º –∫–æ–Ω—Ç—É—Ä–æ–≤
üìè –†–µ–±—Ä–∞ - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ª–∏–Ω–∏—è–º –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
üî≤ –°–µ—Ç–∫–∞ - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π —Å–µ—Ç–∫–µ
üìê –û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ/–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
üéØ –¢–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è - –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª–∏–Ω–∏–π –∏ –∫–æ–Ω—Ç—É—Ä–æ–≤
"""

import math
from typing import Dict, List, Set, Optional, Tuple, Callable, Any, NamedTuple
from dataclasses import dataclass, field
from enum import Enum
from abc import ABC, abstractmethod

# –ò–º–ø–æ—Ä—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —É—Ç–∏–ª–∏—Ç
try:
    from ..geometry_utils import distance_point_to_point, distance_point_to_line, line_intersection, r2
    GEOMETRY_UTILS_AVAILABLE = True
except ImportError:
    # Fallback —Ñ—É–Ω–∫—Ü–∏–∏
    def distance_point_to_point(p1, p2):
        return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)
    
    def distance_point_to_line(point, line_start, line_end):
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –ª–∏–Ω–∏–∏
        px, py = point
        x1, y1 = line_start
        x2, y2 = line_end
        
        A = px - x1
        B = py - y1
        C = x2 - x1
        D = y2 - y1
        
        dot = A * C + B * D
        len_sq = C * C + D * D
        
        if len_sq < 1e-10:
            return math.sqrt(A * A + B * B)
        
        param = dot / len_sq
        
        if param < 0:
            xx, yy = x1, y1
        elif param > 1:
            xx, yy = x2, y2
        else:
            xx = x1 + param * C
            yy = y1 + param * D
        
        dx = px - xx
        dy = py - yy
        return math.sqrt(dx * dx + dy * dy)
    
    def line_intersection(line1_start, line1_end, line2_start, line2_end):
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª–∏–Ω–∏–π
        x1, y1 = line1_start
        x2, y2 = line1_end
        x3, y3 = line2_start
        x4, y4 = line2_end
        
        denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
        if abs(denom) < 1e-10:
            return None
        
        t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom
        x = x1 + t * (x2 - x1)
        y = y1 + t * (y2 - y1)
        
        return (x, y)
    
    def r2(value):
        return round(float(value), 2)
    
    GEOMETRY_UTILS_AVAILABLE = False


class SnapType(Enum):
    """–¢–∏–ø—ã –ø—Ä–∏–≤—è–∑–æ–∫"""
    NONE = "none"                 # –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏
    VERTEX = "vertex"             # –ö –≤–µ—Ä—à–∏–Ω–µ
    EDGE = "edge"                 # –ö —Ä–µ–±—Ä—É/–ª–∏–Ω–∏–∏
    MIDPOINT = "midpoint"         # –ö —Å–µ—Ä–µ–¥–∏–Ω–µ —Ä–µ–±—Ä–∞
    INTERSECTION = "intersection"  # –ö –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é –ª–∏–Ω–∏–π
    PERPENDICULAR = "perpendicular" # –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä –∫ –ª–∏–Ω–∏–∏
    GRID = "grid"                 # –ö —Å–µ—Ç–∫–µ
    ORTHO = "ortho"               # –û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    CENTER = "center"             # –ö —Ü–µ–Ω—Ç—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞


class OrthogonalDirection(Enum):
    """–û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    NONE = "none"
    HORIZONTAL = "horizontal"     # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    VERTICAL = "vertical"         # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    DIAGONAL_45 = "diagonal_45"   # –î–∏–∞–≥–æ–Ω–∞–ª—å 45¬∞
    DIAGONAL_135 = "diagonal_135" # –î–∏–∞–≥–æ–Ω–∞–ª—å 135¬∞


@dataclass
class SnapPoint:
    """
    –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–≤—è–∑–∫–∏ - —Ç–æ—á–∫–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    
    –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ –ø—Ä–∏–≤—è–∑–∫–∏:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏
    - –¢–∏–ø –ø—Ä–∏–≤—è–∑–∫–∏
    - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–æ—á–∫–∏
    - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    x: float
    y: float
    snap_type: SnapType
    distance: float
    element_id: Optional[str] = None
    element_type: Optional[str] = None
    vertex_index: Optional[int] = None
    edge_index: Optional[int] = None
    description: str = ""
    
    def to_tuple(self) -> Tuple[float, float]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ—Ä—Ç–µ–∂ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        return (self.x, self.y)
    
    def __str__(self) -> str:
        return f"SnapPoint({self.x:.2f}, {self.y:.2f}, {self.snap_type.value})"


@dataclass
class SnapSettings:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤—è–∑–æ–∫
    
    –ü–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ legacy —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏:
    - –î–æ–ø—É—Å–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–≤—è–∑–æ–∫
    - –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–∏–≤—è–∑–æ–∫
    """
    
    # –ì–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ (–∫–∞–∫ –≤ legacy)
    snap_enabled: bool = True
    ortho_enabled: bool = False
    grid_enabled: bool = False
    
    # –î–æ–ø—É—Å–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ legacy)
    vertex_tolerance: float = 10.0
    edge_tolerance: float = 8.0
    grid_tolerance: float = 5.0
    intersection_tolerance: float = 12.0
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏
    grid_size: float = 1.0        # —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –≤ –º–∏—Ä–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
    grid_origin: Tuple[float, float] = (0.0, 0.0)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–∏–≤—è–∑–æ–∫ (–±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    snap_priorities: Dict[SnapType, int] = field(default_factory=lambda: {
        SnapType.VERTEX: 100,      # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –≤–µ—Ä—à–∏–Ω—ã
        SnapType.INTERSECTION: 90,  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        SnapType.MIDPOINT: 80,     # –°–µ—Ä–µ–¥–∏–Ω—ã —Ä–µ–±–µ—Ä
        SnapType.EDGE: 70,         # –†–µ–±—Ä–∞
        SnapType.PERPENDICULAR: 60, # –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä—ã
        SnapType.CENTER: 50,       # –¶–µ–Ω—Ç—Ä—ã
        SnapType.GRID: 30,         # –°–µ—Ç–∫–∞
        SnapType.ORTHO: 20         # –û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    })
    
    # –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–∏–≤—è–∑–æ–∫
    enabled_snap_types: Set[SnapType] = field(default_factory=lambda: {
        SnapType.VERTEX,
        SnapType.EDGE,
        SnapType.MIDPOINT,
        SnapType.INTERSECTION,
        SnapType.GRID
    })
    
    # –û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–µ —É–≥–ª—ã –≤ –≥—Ä–∞–¥—É—Å–∞—Ö (0¬∞ = –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ)
    ortho_angles: List[float] = field(default_factory=lambda: [0.0, 45.0, 90.0, 135.0])
    ortho_tolerance: float = 5.0  # –¥–æ–ø—É—Å–∫ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    max_snap_candidates: int = 100  # –º–∞–∫—Å–∏–º—É–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    spatial_optimization: bool = True  # –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    
    def is_snap_type_enabled(self, snap_type: SnapType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ –ø—Ä–∏–≤—è–∑–∫–∏"""
        if not self.snap_enabled:
            return False
        
        if snap_type == SnapType.GRID:
            return self.grid_enabled
        elif snap_type == SnapType.ORTHO:
            return self.ortho_enabled
        else:
            return snap_type in self.enabled_snap_types
    
    def get_tolerance(self, snap_type: SnapType) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø—É—Å–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–∏–≤—è–∑–∫–∏"""
        tolerance_map = {
            SnapType.VERTEX: self.vertex_tolerance,
            SnapType.EDGE: self.edge_tolerance,
            SnapType.MIDPOINT: self.edge_tolerance,
            SnapType.INTERSECTION: self.intersection_tolerance,
            SnapType.PERPENDICULAR: self.edge_tolerance,
            SnapType.CENTER: self.vertex_tolerance,
            SnapType.GRID: self.grid_tolerance,
            SnapType.ORTHO: float('inf')  # –û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
        }
        
        return tolerance_map.get(snap_type, 10.0)


class SnapCandidate(NamedTuple):
    """–ö–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ - –Ω–∞–π–¥–µ–Ω–Ω–∞—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞"""
    point: Tuple[float, float]
    snap_type: SnapType
    distance: float
    priority: int
    element_id: Optional[str] = None
    element_type: Optional[str] = None
    metadata: Dict[str, Any] = {}


class ISnapProvider(ABC):
    """
    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Ç–æ—á–µ–∫ –ø—Ä–∏–≤—è–∑–∫–∏
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ç–æ—á–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏:
    - –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–æ–º–Ω–∞—Ç—ã, –æ–±–ª–∞—Å—Ç–∏)
    - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–µ—Ç–∫–∞, –æ—Å–∏)
    - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä)
    """
    
    @abstractmethod
    def get_snap_candidates(self, 
                          x: float, y: float, 
                          tolerance: float,
                          snap_types: Set[SnapType],
                          coordinate_system: Any = None) -> List[SnapCandidate]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
        
        Args:
            x, y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏—Ä–æ–≤—ã–µ)
            tolerance: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            snap_types: –¢—Ä–µ–±—É–µ–º—ã–µ —Ç–∏–ø—ã –ø—Ä–∏–≤—è–∑–æ–∫
            coordinate_system: –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        """
        pass
    
    @abstractmethod
    def get_provider_id(self) -> str:
        """–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        pass


class GeometrySnapProvider(ISnapProvider):
    """
    –ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    –ü–æ—Ä—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ legacy _snap_world() –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å:
    - –ö–æ–º–Ω–∞—Ç–∞–º–∏ (rooms)
    - –û–±–ª–∞—Å—Ç—è–º–∏ (areas) 
    - –ü—Ä–æ–µ–º–∞–º–∏ (openings)
    - –®–∞—Ö—Ç–∞–º–∏ (shafts)
    """
    
    def __init__(self, geometry_data: Dict[str, List[Dict]]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            geometry_data: –°–ª–æ–≤–∞—Ä—å —Å —Å–ø–∏—Å–∫–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
                          {'rooms': [...], 'areas': [...], 'openings': [...]}
        """
        self.geometry_data = geometry_data
        self.provider_id = "geometry_snap_provider"
        
        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        self._vertex_cache: Dict[str, List[Tuple[float, float]]] = {}
        self._edge_cache: Dict[str, List[Tuple[Tuple[float, float], Tuple[float, float]]]] = {}
        self._cache_valid = False
    
    def get_provider_id(self) -> str:
        return self.provider_id
    
    def get_snap_candidates(self, 
                          x: float, y: float,
                          tolerance: float,
                          snap_types: Set[SnapType],
                          coordinate_system: Any = None) -> List[SnapCandidate]:
        """–ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö"""
        
        candidates = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self._cache_valid:
            self._rebuild_cache()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ–ø—É—Å–∫ –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –≤ –º–∏—Ä–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        world_tolerance = tolerance
        if coordinate_system:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏ -> –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            try:
                p1_world = coordinate_system.screen_to_world(0, 0)
                p2_world = coordinate_system.screen_to_world(tolerance, 0)
                world_tolerance = abs(p2_world[0] - p1_world[0])
            except:
                world_tolerance = tolerance * 0.01  # fallback
        
        # –ü–æ–∏—Å–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –∫ –≤–µ—Ä—à–∏–Ω–∞–º
        if SnapType.VERTEX in snap_types:
            vertex_candidates = self._find_vertex_candidates(x, y, world_tolerance)
            candidates.extend(vertex_candidates)
        
        # –ü–æ–∏—Å–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –∫ —Ä–µ–±—Ä–∞–º
        if SnapType.EDGE in snap_types or SnapType.MIDPOINT in snap_types:
            edge_candidates = self._find_edge_candidates(x, y, world_tolerance, snap_types)
            candidates.extend(edge_candidates)
        
        # –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        if SnapType.INTERSECTION in snap_types:
            intersection_candidates = self._find_intersection_candidates(x, y, world_tolerance)
            candidates.extend(intersection_candidates)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        candidates.sort(key=lambda c: (-c.priority, c.distance))
        
        return candidates
    
    def _rebuild_cache(self):
        """–ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—ç—à–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        self._vertex_cache.clear()
        self._edge_cache.clear()
        
        for element_type, elements in self.geometry_data.items():
            for element in elements:
                element_id = element.get('id', f'{element_type}_{id(element)}')
                
                # –ö—ç—à–∏—Ä—É–µ–º –≤–µ—Ä—à–∏–Ω—ã
                outer_points = element.get('outer_xy_m', [])
                if outer_points:
                    self._vertex_cache[element_id] = [(float(p[0]), float(p[1])) for p in outer_points]
                    
                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–±—Ä–∞
                    edges = []
                    for i in range(len(outer_points)):
                        p1 = (float(outer_points[i][0]), float(outer_points[i][1]))
                        p2 = (float(outer_points[(i + 1) % len(outer_points)][0]), 
                              float(outer_points[(i + 1) % len(outer_points)][1]))
                        edges.append((p1, p2))
                    self._edge_cache[element_id] = edges
                
                # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
                inner_loops = element.get('inner_loops_xy_m', [])
                for loop_idx, loop in enumerate(inner_loops):
                    loop_id = f"{element_id}_inner_{loop_idx}"
                    self._vertex_cache[loop_id] = [(float(p[0]), float(p[1])) for p in loop]
                    
                    edges = []
                    for i in range(len(loop)):
                        p1 = (float(loop[i][0]), float(loop[i][1]))
                        p2 = (float(loop[(i + 1) % len(loop)][0]), 
                              float(loop[(i + 1) % len(loop)][1]))
                        edges.append((p1, p2))
                    self._edge_cache[loop_id] = edges
        
        self._cache_valid = True
    
    def _find_vertex_candidates(self, x: float, y: float, tolerance: float) -> List[SnapCandidate]:
        """–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –≤–µ—Ä—à–∏–Ω (–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ legacy)"""
        candidates = []
        
        for element_id, vertices in self._vertex_cache.items():
            for vertex_idx, vertex in enumerate(vertices):
                distance = distance_point_to_point((x, y), vertex)
                
                if distance <= tolerance:
                    candidates.append(SnapCandidate(
                        point=vertex,
                        snap_type=SnapType.VERTEX,
                        distance=distance,
                        priority=100,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–µ—Ä—à–∏–Ω
                        element_id=element_id,
                        element_type=self._get_element_type(element_id),
                        metadata={'vertex_index': vertex_idx}
                    ))
        
        return candidates
    
    def _find_edge_candidates(self, x: float, y: float, tolerance: float, 
                            snap_types: Set[SnapType]) -> List[SnapCandidate]:
        """–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Ä–µ–±–µ—Ä –∏ –∏—Ö —Å–µ—Ä–µ–¥–∏–Ω"""
        candidates = []
        
        for element_id, edges in self._edge_cache.items():
            for edge_idx, (p1, p2) in enumerate(edges):
                distance = distance_point_to_line((x, y), p1, p2)
                
                if distance <= tolerance:
                    # –ë–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –Ω–∞ —Ä–µ–±—Ä–µ
                    closest_point = self._closest_point_on_edge((x, y), p1, p2)
                    
                    if SnapType.EDGE in snap_types:
                        candidates.append(SnapCandidate(
                            point=closest_point,
                            snap_type=SnapType.EDGE,
                            distance=distance,
                            priority=70,
                            element_id=element_id,
                            element_type=self._get_element_type(element_id),
                            metadata={'edge_index': edge_idx, 'edge': (p1, p2)}
                        ))
                    
                    # –°–µ—Ä–µ–¥–∏–Ω–∞ —Ä–µ–±—Ä–∞
                    if SnapType.MIDPOINT in snap_types:
                        midpoint = ((p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2)
                        mid_distance = distance_point_to_point((x, y), midpoint)
                        
                        if mid_distance <= tolerance:
                            candidates.append(SnapCandidate(
                                point=midpoint,
                                snap_type=SnapType.MIDPOINT,
                                distance=mid_distance,
                                priority=80,
                                element_id=element_id,
                                element_type=self._get_element_type(element_id),
                                metadata={'edge_index': edge_idx, 'edge': (p1, p2)}
                            ))
        
        return candidates
    
    def _find_intersection_candidates(self, x: float, y: float, 
                                    tolerance: float) -> List[SnapCandidate]:
        """–ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ª–∏–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        candidates = []
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ø–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ä–µ–±—Ä–∞–º–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        
        all_edges = []
        for element_id, edges in self._edge_cache.items():
            for edge_idx, edge in enumerate(edges):
                all_edges.append((edge, element_id, edge_idx))
        
        # –ò—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ —Ä–µ–±–µ—Ä
        for i, (edge1, elem1, idx1) in enumerate(all_edges):
            for j, (edge2, elem2, idx2) in enumerate(all_edges[i+1:], i+1):
                if elem1 == elem2:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–±—Ä–∞ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    continue
                
                intersection = line_intersection(edge1[0], edge1[1], edge2[0], edge2[1])
                if intersection:
                    distance = distance_point_to_point((x, y), intersection)
                    if distance <= tolerance:
                        candidates.append(SnapCandidate(
                            point=intersection,
                            snap_type=SnapType.INTERSECTION,
                            distance=distance,
                            priority=90,
                            element_id=f"{elem1}x{elem2}",
                            element_type="intersection",
                            metadata={
                                'edge1': edge1,
                                'edge2': edge2,
                                'element1_id': elem1,
                                'element2_id': elem2
                            }
                        ))
        
        return candidates
    
    def _closest_point_on_edge(self, point: Tuple[float, float], 
                             edge_start: Tuple[float, float],
                             edge_end: Tuple[float, float]) -> Tuple[float, float]:
        """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π —Ç–æ—á–∫–∏ –Ω–∞ —Ä–µ–±—Ä–µ"""
        px, py = point
        x1, y1 = edge_start
        x2, y2 = edge_end
        
        # –í–µ–∫—Ç–æ—Ä —Ä–µ–±—Ä–∞
        dx = x2 - x1
        dy = y2 - y1
        
        if dx == 0 and dy == 0:
            return edge_start
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–æ–µ–∫—Ü–∏–∏ —Ç–æ—á–∫–∏ –Ω–∞ –ø—Ä—è–º—É—é
        t = ((px - x1) * dx + (py - y1) * dy) / (dx * dx + dy * dy)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–±—Ä–∞
        t = max(0, min(1, t))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫—É
        return (x1 + t * dx, y1 + t * dy)
    
    def _get_element_type(self, element_id: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID"""
        if '_inner_' in element_id:
            return 'inner_loop'
        
        for element_type, elements in self.geometry_data.items():
            for element in elements:
                if element.get('id') == element_id or element_id.startswith(element_type):
                    return element_type
        
        return 'unknown'
    
    def invalidate_cache(self):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏"""
        self._cache_valid = False


class GridSnapProvider(ISnapProvider):
    """–ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –∫ —Å–µ—Ç–∫–µ"""
    
    def __init__(self, grid_size: float = 1.0, origin: Tuple[float, float] = (0.0, 0.0)):
        self.grid_size = grid_size
        self.origin = origin
        self.provider_id = "grid_snap_provider"
    
    def get_provider_id(self) -> str:
        return self.provider_id
    
    def get_snap_candidates(self, x: float, y: float, tolerance: float,
                          snap_types: Set[SnapType],
                          coordinate_system: Any = None) -> List[SnapCandidate]:
        """–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫ —Å–µ—Ç–∫–∏"""
        if SnapType.GRID not in snap_types:
            return []
        
        candidates = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ–ø—É—Å–∫ –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –≤ –º–∏—Ä–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        world_tolerance = tolerance * 0.01  # —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if coordinate_system:
            try:
                p1_world = coordinate_system.screen_to_world(0, 0)
                p2_world = coordinate_system.screen_to_world(tolerance, 0)
                world_tolerance = abs(p2_world[0] - p1_world[0])
            except:
                pass
        
        # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Å–µ—Ç–∫–∏
        grid_x = round((x - self.origin[0]) / self.grid_size) * self.grid_size + self.origin[0]
        grid_y = round((y - self.origin[1]) / self.grid_size) * self.grid_size + self.origin[1]
        
        distance = distance_point_to_point((x, y), (grid_x, grid_y))
        
        if distance <= world_tolerance:
            candidates.append(SnapCandidate(
                point=(grid_x, grid_y),
                snap_type=SnapType.GRID,
                distance=distance,
                priority=30,
                element_id="grid",
                element_type="grid",
                metadata={'grid_size': self.grid_size}
            ))
        
        return candidates


class SnapSystem:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤—è–∑–æ–∫ - –ø–æ—Ä—Ç–∏—Ä—É–µ—Ç _snap_world() –∏–∑ legacy
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø—Ä–∏–≤—è–∑–æ–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
    –≠—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤—è–∑–æ–∫.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, settings: Optional[SnapSettings] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤—è–∑–æ–∫
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤—è–∑–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
        """
        self.settings = settings or SnapSettings()
        self.providers: Dict[str, ISnapProvider] = {}
        
        # –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._last_snap_result: Optional[SnapPoint] = None
        self._last_snap_input: Optional[Tuple[float, float]] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.stats = {
            'total_snaps': 0,
            'successful_snaps': 0,
            'cache_hits': 0,
            'average_candidates': 0.0
        }
        
        print("‚úÖ SnapSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def add_provider(self, provider: ISnapProvider) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫"""
        self.providers[provider.get_provider_id()] = provider
        print(f"üìç –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–≤—è–∑–æ–∫: {provider.get_provider_id()}")
    
    def remove_provider(self, provider_id: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫"""
        if provider_id in self.providers:
            del self.providers[provider_id]
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–≤—è–∑–æ–∫: {provider_id}")
    
    def snap_world(self, x: float, y: float, 
                  coordinate_system: Any = None,
                  reference_point: Optional[Tuple[float, float]] = None) -> Tuple[float, float]:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ - –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ legacy _snap_world()
        
        Args:
            x, y: –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            coordinate_system: –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            reference_point: –û–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            
        Returns:
            –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x, y)
        """
        self.stats['total_snaps'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (self._last_snap_input and 
            abs(self._last_snap_input[0] - x) < 0.001 and 
            abs(self._last_snap_input[1] - y) < 0.001):
            self.stats['cache_hits'] += 1
            if self._last_snap_result:
                return self._last_snap_result.to_tuple()
        
        original_point = (x, y)
        best_snap = None
        
        # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–∫—É
        if not self.settings.snap_enabled:
            return self._apply_final_processing(original_point, reference_point)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        all_candidates = []
        enabled_types = {snap_type for snap_type in SnapType 
                        if self.settings.is_snap_type_enabled(snap_type)}
        
        for provider in self.providers.values():
            try:
                candidates = provider.get_snap_candidates(
                    x, y,
                    max(self.settings.vertex_tolerance, self.settings.edge_tolerance),
                    enabled_types,
                    coordinate_system
                )
                all_candidates.extend(candidates)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {provider.get_provider_id()}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if all_candidates:
            self.stats['average_candidates'] = (
                self.stats['average_candidates'] * (self.stats['total_snaps'] - 1) + 
                len(all_candidates)
            ) / self.stats['total_snaps']
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç
        if all_candidates:
            best_snap = self._select_best_candidate(all_candidates, original_point, coordinate_system)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–∫—É
        if best_snap:
            self.stats['successful_snaps'] += 1
            result_point = best_snap.to_tuple()
        else:
            result_point = original_point
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ç.–¥.)
        final_point = self._apply_final_processing(result_point, reference_point)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ
        self._last_snap_input = original_point
        self._last_snap_result = SnapPoint(
            x=final_point[0],
            y=final_point[1], 
            snap_type=best_snap.snap_type if best_snap else SnapType.NONE,
            distance=0.0,
            description="Final result"
        )
        
        return final_point
    
    def _select_best_candidate(self, candidates: List[SnapCandidate], 
                             original_point: Tuple[float, float],
                             coordinate_system: Any) -> Optional[SnapPoint]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏"""
        if not candidates:
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –¥–æ–ø—É—Å–∫–∞–º
        valid_candidates = []
        
        for candidate in candidates:
            tolerance = self.settings.get_tolerance(candidate.snap_type)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            distance_pixels = candidate.distance
            if coordinate_system:
                try:
                    # –ü—Ä–æ—Å—Ç–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∞
                    scale = getattr(coordinate_system, 'scale', 1.0)
                    distance_pixels = candidate.distance * scale
                except:
                    pass
            
            if distance_pixels <= tolerance:
                valid_candidates.append(candidate)
        
        if not valid_candidates:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –∑–∞—Ç–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        valid_candidates.sort(key=lambda c: (-c.priority, c.distance))
        
        best = valid_candidates[0]
        
        return SnapPoint(
            x=best.point[0],
            y=best.point[1],
            snap_type=best.snap_type,
            distance=best.distance,
            element_id=best.element_id,
            element_type=best.element_type,
            description=f"Snap to {best.snap_type.value}"
        )
    
    def _apply_final_processing(self, point: Tuple[float, float], 
                              reference_point: Optional[Tuple[float, float]]) -> Tuple[float, float]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ç.–¥."""
        x, y = point
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –µ—Å—Ç—å –æ–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞
        if (self.settings.ortho_enabled and reference_point and 
            self.settings.is_snap_type_enabled(SnapType.ORTHO)):
            x, y = self._apply_orthogonal_constraint(x, y, reference_point)
        
        # –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return (r2(x), r2(y))
    
    def _apply_orthogonal_constraint(self, x: float, y: float, 
                                   reference_point: Tuple[float, float]) -> Tuple[float, float]:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ legacy)
        
        –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ç–æ—á–∫—É –∫ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–ø–æ—Ä–Ω–æ–π —Ç–æ—á–∫–∏.
        """
        ref_x, ref_y = reference_point
        dx = x - ref_x
        dy = y - ref_y
        
        if abs(dx) < 0.001 and abs(dy) < 0.001:
            return (x, y)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª
        angle = math.degrees(math.atan2(dy, dx))
        if angle < 0:
            angle += 360
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª
        best_ortho_angle = None
        min_angle_diff = float('inf')
        
        for ortho_angle in self.settings.ortho_angles:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —É–≥–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç–∏
            diff1 = abs(angle - ortho_angle)
            diff2 = abs(angle - ortho_angle + 360)
            diff3 = abs(angle - ortho_angle - 360)
            
            min_diff = min(diff1, diff2, diff3)
            
            if min_diff < min_angle_diff:
                min_angle_diff = min_diff
                best_ortho_angle = ortho_angle
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ —É–≥–æ–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–æ–∫
        if (best_ortho_angle is not None and 
            min_angle_diff <= self.settings.ortho_tolerance):
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –æ–ø–æ—Ä–Ω–æ–π —Ç–æ—á–∫–∏
            distance = math.sqrt(dx * dx + dy * dy)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª
            ortho_radians = math.radians(best_ortho_angle)
            new_x = ref_x + distance * math.cos(ortho_radians)
            new_y = ref_y + distance * math.sin(ortho_radians)
            
            return (new_x, new_y)
        
        return (x, y)
    
    def get_snap_info(self, x: float, y: float, 
                     coordinate_system: Any = None) -> Optional[SnapPoint]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≤—è–∑–∫–µ –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        if not self.settings.snap_enabled:
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ snap_world, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        all_candidates = []
        enabled_types = {snap_type for snap_type in SnapType 
                        if self.settings.is_snap_type_enabled(snap_type)}
        
        for provider in self.providers.values():
            try:
                candidates = provider.get_snap_candidates(
                    x, y,
                    max(self.settings.vertex_tolerance, self.settings.edge_tolerance),
                    enabled_types,
                    coordinate_system
                )
                all_candidates.extend(candidates)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {provider.get_provider_id()}: {e}")
        
        return self._select_best_candidate(all_candidates, (x, y), coordinate_system)
    
    def toggle_snap(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ (–∫–ª–∞–≤–∏—à–∞ S)"""
        self.settings.snap_enabled = not self.settings.snap_enabled
        self._clear_cache()
        return self.settings.snap_enabled
    
    def toggle_ortho(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–∫–ª–∞–≤–∏—à–∞ O)"""
        self.settings.ortho_enabled = not self.settings.ortho_enabled
        self._clear_cache()
        return self.settings.ortho_enabled
    
    def toggle_grid(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ—Ç–∫–µ (–∫–ª–∞–≤–∏—à–∞ G)"""
        self.settings.grid_enabled = not self.settings.grid_enabled
        self._clear_cache()
        return self.settings.grid_enabled
    
    def set_grid_size(self, size: float) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏"""
        self.settings.grid_size = size
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å–µ—Ç–∫–∏
        for provider in self.providers.values():
            if isinstance(provider, GridSnapProvider):
                provider.grid_size = size
        
        self._clear_cache()
    
    def get_status_text(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è UI"""
        status_parts = []
        
        if self.settings.snap_enabled:
            status_parts.append("SNAP")
        if self.settings.ortho_enabled:
            status_parts.append("ORTHO")  
        if self.settings.grid_enabled:
            status_parts.append("GRID")
        
        if not status_parts:
            return "No constraints"
        
        return " | ".join(status_parts)
    
    def _clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self._last_snap_result = None
        self._last_snap_input = None
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return self.stats.copy()


# =============================================================================
# –£–¢–ò–õ–ò–¢–´ –ò –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def create_snap_system(geometry_data: Dict[str, List[Dict]], 
                      settings: Optional[SnapSettings] = None) -> SnapSystem:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤—è–∑–æ–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    Args:
        geometry_data: –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—è–∑–æ–∫
    """
    snap_system = SnapSystem(settings)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    geometry_provider = GeometrySnapProvider(geometry_data)
    snap_system.add_provider(geometry_provider)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å–µ—Ç–∫–∏
    grid_provider = GridSnapProvider(
        grid_size=settings.grid_size if settings else 1.0,
        origin=settings.grid_origin if settings else (0.0, 0.0)
    )
    snap_system.add_provider(grid_provider)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—è–∑–æ–∫")
    return snap_system


def create_snap_settings_from_legacy(legacy_settings: Dict[str, Any]) -> SnapSettings:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑ legacy –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    –ü–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    """
    settings = SnapSettings()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
    settings.snap_enabled = legacy_settings.get('snap_enabled', True)
    settings.ortho_enabled = legacy_settings.get('ortho_enabled', False)
    settings.grid_enabled = legacy_settings.get('grid_enabled', False)
    
    # –î–æ–ø—É—Å–∫–∏
    settings.vertex_tolerance = legacy_settings.get('vertex_tolerance', 10.0)
    settings.edge_tolerance = legacy_settings.get('edge_tolerance', 8.0)
    
    # –°–µ—Ç–∫–∞
    settings.grid_size = legacy_settings.get('grid_size', 1.0)
    
    return settings


# =============================================================================
# –≠–ö–°–ü–û–†–¢ –ü–£–ë–õ–ò–ß–ù–´–• –ò–ù–¢–ï–†–§–ï–ô–°–û–í  
# =============================================================================

__all__ = [
    'SnapSystem',
    'SnapSettings', 
    'SnapPoint',
    'SnapType',
    'OrthogonalDirection',
    'ISnapProvider',
    'GeometrySnapProvider',
    'GridSnapProvider',
    'create_snap_system',
    'create_snap_settings_from_legacy'
]