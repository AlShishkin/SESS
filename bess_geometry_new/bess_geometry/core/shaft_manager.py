# -*- coding: utf-8 -*-
"""
ShaftManager - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞—Ö—Ç–∞–º–∏ –∑–¥–∞–Ω–∏–π BESS_Geometry

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏ —à–∞—Ö—Ç–∞–º–∏ –∑–¥–∞–Ω–∏–π:
‚Ä¢ –ò–º–ø–æ—Ä—Ç —à–∞—Ö—Ç –∏–∑ –±–∞–∑–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (base_shafts)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞—Ö—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ BESS –¥–ª—è —à–∞—Ö—Ç
‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∫–æ–Ω—Ç—É—Ä–∞–º–∏
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º

–®–∞—Ö—Ç—ã - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑–¥—É—à–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –≤ –∑–¥–∞–Ω–∏—è—Ö,
—Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —ç—Ç–∞–∂–∞–º–∏.
"""

import uuid
from typing import Dict, List, Optional, Tuple, Any, Set
from datetime import datetime
from copy import deepcopy

# –ò–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from geometry_utils import centroid_xy, bounds, r2, polygon_area
    GEOMETRY_UTILS_AVAILABLE = True
except ImportError:
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: geometry_utils –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è shaft_manager")
    GEOMETRY_UTILS_AVAILABLE = False
    
    # –ó–∞–≥–ª—É—à–∫–∏
    def centroid_xy(points): return (0.0, 0.0)
    def bounds(points): return (0.0, 0.0, 100.0, 100.0)
    def r2(value): return round(float(value), 2)
    def polygon_area(points): return 1.0 if len(points) >= 3 else 0.0


class ShaftType:
    """–¢–∏–ø—ã —à–∞—Ö—Ç –≤ –∑–¥–∞–Ω–∏–∏"""
    ELEVATOR = "ELEVATOR"           # –õ–∏—Ñ—Ç–æ–≤–∞—è —à–∞—Ö—Ç–∞
    STAIR = "STAIR"                # –õ–µ—Å—Ç–Ω–∏—á–Ω–∞—è –∫–ª–µ—Ç–∫–∞
    VENTILATION = "VENTILATION"    # –í–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω–∞—è —à–∞—Ö—Ç–∞
    UTILITY = "UTILITY"            # –ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —à–∞—Ö—Ç–∞
    FIRE_ESCAPE = "FIRE_ESCAPE"    # –ü–æ–∂–∞—Ä–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞
    SMOKE_EXHAUST = "SMOKE_EXHAUST" # –î—ã–º–æ—É–¥–∞–ª–µ–Ω–∏–µ
    GENERAL = "GENERAL"            # –û–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è


class ShaftStatus:
    """–°—Ç–∞—Ç—É—Å—ã —à–∞—Ö—Ç"""
    ACTIVE = "ACTIVE"              # –ê–∫—Ç–∏–≤–Ω–∞—è —à–∞—Ö—Ç–∞
    BLOCKED = "BLOCKED"            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ
    MODIFIED = "MODIFIED"          # –ò–∑–º–µ–Ω–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π
    DELETED = "DELETED"            # –£–¥–∞–ª–µ–Ω–∞ —Å —É—Ä–æ–≤–Ω—è


class ShaftManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞—Ö—Ç–∞–º–∏ –∑–¥–∞–Ω–∏–π
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑–¥–∞–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
    –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞—Ö—Ç"""
        # –®–∞—Ö—Ç—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É—Ä–æ–≤–Ω—è–º: {level_name: [shaft_data, ...]}
        self.shafts_by_level = {}
        
        # –ë–∞–∑–æ–≤—ã–µ —à–∞—Ö—Ç—ã (—ç—Ç–∞–ª–æ–Ω–Ω—ã–µ): {shaft_id: shaft_data}
        self.base_shafts = {}
        
        # –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: –±–∞–∑–æ–≤–∞—è —à–∞—Ö—Ç–∞ -> —à–∞—Ö—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
        # {base_shaft_id: {level: shaft_id}}
        self.shaft_instances = {}
        
        # –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self._shaft_cache = {}
        self._dirty_cache = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cloning_options = {
            'auto_prefix': True,        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å BESS_
            'preserve_geometry': True,   # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é
            'inherit_parameters': True,  # –ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            'sync_modifications': True   # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        }
        
        print("‚úÖ ShaftManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def import_from_base(self, base_shafts: List[Dict], target_levels: List[str]) -> Dict[str, Any]:
        """
        –ò–º–ø–æ—Ä—Ç —à–∞—Ö—Ç –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
        
        Args:
            base_shafts: –°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö —à–∞—Ö—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            target_levels: –°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —à–∞—Ö—Ç—ã
            
        Returns:
            –û—Ç—á–µ—Ç –æ–± –∏–º–ø–æ—Ä—Ç–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        import_report = {
            'success': True,
            'base_shafts_processed': 0,
            'total_instances_created': 0,
            'shafts_by_level': {},
            'errors': [],
            'warnings': []
        }
        
        try:
            print(f"üîÑ –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —à–∞—Ö—Ç: {len(base_shafts)} –±–∞–∑–æ–≤—ã—Ö —à–∞—Ö—Ç –Ω–∞ {len(target_levels)} —É—Ä–æ–≤–Ω–µ–π")
            
            for base_shaft in base_shafts:
                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —à–∞—Ö—Ç—ã
                    validation = self._validate_base_shaft(base_shaft)
                    if not validation['is_valid']:
                        import_report['errors'].extend(validation['errors'])
                        if validation['is_critical']:
                            continue
                        else:
                            import_report['warnings'].extend(validation['warnings'])
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π —à–∞—Ö—Ç—ã
                    prepared_shaft = self._prepare_base_shaft(base_shaft)
                    base_shaft_id = prepared_shaft['id']
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —à–∞—Ö—Ç—ã
                    self.base_shafts[base_shaft_id] = prepared_shaft
                    self.shaft_instances[base_shaft_id] = {}
                    
                    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
                    for level in target_levels:
                        try:
                            cloned_shaft = self._clone_shaft(prepared_shaft, level)
                            
                            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                            if level not in self.shafts_by_level:
                                self.shafts_by_level[level] = []
                                import_report['shafts_by_level'][level] = 0
                            
                            self.shafts_by_level[level].append(cloned_shaft)
                            self.shaft_instances[base_shaft_id][level] = cloned_shaft['id']
                            
                            import_report['shafts_by_level'][level] += 1
                            import_report['total_instances_created'] += 1
                            
                        except Exception as e:
                            error_msg = f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞—Ö—Ç—ã {base_shaft_id} –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {level}: {e}"
                            import_report['errors'].append(error_msg)
                            import_report['success'] = False
                    
                    import_report['base_shafts_processed'] += 1
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–∑–æ–≤–æ–π —à–∞—Ö—Ç—ã: {e}"
                    import_report['errors'].append(error_msg)
                    import_report['success'] = False
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
            self._rebuild_cache()
            
            print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {import_report['base_shafts_processed']} –±–∞–∑–æ–≤—ã—Ö —à–∞—Ö—Ç, {import_report['total_instances_created']} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤")
            
            if import_report['warnings']:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(import_report['warnings'])}")
            
            if import_report['errors']:
                print(f"‚ùå –û—à–∏–±–∫–∏: {len(import_report['errors'])}")
                import_report['success'] = False
                
        except Exception as e:
            import_report['errors'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            import_report['success'] = False
            
        return import_report
    
    def _clone_shaft(self, source_shaft: Dict, level: str) -> Dict[str, Any]:
        """
        –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞—Ö—Ç—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º BESS_ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å
        
        Args:
            source_shaft: –ò—Å—Ö–æ–¥–Ω–∞—è —à–∞—Ö—Ç–∞ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            level: –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
            
        Returns:
            –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∞—Ö—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ BESS
        """
        cloned = deepcopy(source_shaft)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ID –¥–ª—è –∫–ª–æ–Ω–∞
        base_id = source_shaft['id']
        cloned_id = f"{base_id}_{level}"
        cloned['id'] = cloned_id
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        original_name = source_shaft.get('name', 'Shaft')
        cloned['name'] = f"{original_name}_{level}"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã BESS
        if 'params' not in cloned:
            cloned['params'] = {}
        
        params = cloned['params']
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ BESS_ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        if self.cloning_options['auto_prefix']:
            prefixed_params = {}
            for key, value in params.items():
                if not key.startswith('BESS_'):
                    prefixed_key = f'BESS_{key}'
                    prefixed_params[prefixed_key] = value
                else:
                    prefixed_params[key] = value
            
            cloned['params'] = prefixed_params
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ BESS –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —à–∞—Ö—Ç
        cloned['params'].update({
            'BESS_level': level,
            'BESS_Element_Type': 'SHAFT',
            'BESS_Base_Shaft_Id': source_shaft['id'],
            'BESS_Shaft_Status': ShaftStatus.ACTIVE,
            'BESS_Created_At': datetime.now().isoformat(),
            'BESS_Modified_At': datetime.now().isoformat(),
            'BESS_Is_Cloned': 'True'
        })
        
        # –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —à–∞—Ö—Ç—ã
        shaft_type = source_shaft.get('params', {}).get('shaft_type', ShaftType.GENERAL)
        cloned['params']['BESS_Shaft_Type'] = shaft_type
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —à–∞—Ö—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if shaft_type == ShaftType.ELEVATOR:
            cloned['params']['BESS_Elevator_Count'] = source_shaft.get('params', {}).get('elevator_count', '1')
            cloned['params']['BESS_Elevator_Capacity'] = source_shaft.get('params', {}).get('capacity', '1000')
        
        elif shaft_type == ShaftType.STAIR:
            cloned['params']['BESS_Stair_Width'] = source_shaft.get('params', {}).get('width', '1.2')
            cloned['params']['BESS_Emergency_Exit'] = source_shaft.get('params', {}).get('emergency_exit', 'True')
        
        elif shaft_type == ShaftType.VENTILATION:
            cloned['params']['BESS_Airflow_Rate'] = source_shaft.get('params', {}).get('airflow_rate', '1000')
            cloned['params']['BESS_Vent_Direction'] = source_shaft.get('params', {}).get('direction', 'EXHAUST')
        
        # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
        if GEOMETRY_UTILS_AVAILABLE and cloned.get('outer_xy_m'):
            coords = cloned['outer_xy_m']
            cloned['calculated_area_m2'] = abs(polygon_area(coords))
            cloned['centroid'] = centroid_xy(coords)
            cloned['bounds'] = bounds(coords)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self._compute_shaft_parameters(cloned)
        
        return cloned
    
    def _prepare_base_shaft(self, shaft: Dict) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π —à–∞—Ö—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"""
        prepared = deepcopy(shaft)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if 'id' not in prepared or not prepared['id']:
            prepared['id'] = str(uuid.uuid4())
        
        # –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if 'name' not in prepared:
            shaft_type = prepared.get('params', {}).get('shaft_type', ShaftType.GENERAL)
            prepared['name'] = f"{shaft_type}_Shaft_{len(self.base_shafts) + 1}"
        
        if 'params' not in prepared:
            prepared['params'] = {}
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        prepared['params'].update({
            'is_base_shaft': 'True',
            'created_at': datetime.now().isoformat(),
            'shaft_type': prepared['params'].get('shaft_type', ShaftType.GENERAL)
        })
        
        return prepared
    
    def _compute_shaft_parameters(self, shaft: Dict):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞—Ö—Ç—ã"""
        if not GEOMETRY_UTILS_AVAILABLE:
            return
        
        coords = shaft.get('outer_xy_m', [])
        if not coords:
            return
        
        area = abs(polygon_area(coords))
        shaft['params']['BESS_Area_M2'] = str(r2(area))
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
        if area < 2.0:
            shaft['params']['BESS_Size_Category'] = 'SMALL'
        elif area < 10.0:
            shaft['params']['BESS_Size_Category'] = 'MEDIUM'
        else:
            shaft['params']['BESS_Size_Category'] = 'LARGE'
        
        # –ü–µ—Ä–∏–º–µ—Ç—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ—Ä—å —Ç–µ–ø–ª–∞
        if len(coords) >= 3:
            perimeter = 0.0
            for i in range(len(coords)):
                j = (i + 1) % len(coords)
                dx = coords[j][0] - coords[i][0]
                dy = coords[j][1] - coords[i][1]
                perimeter += (dx * dx + dy * dy) ** 0.5
            shaft['params']['BESS_Perimeter_M'] = str(r2(perimeter))
    
    def get_shafts_for_level(self, level: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞—Ö—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        
        Args:
            level: –ò–º—è —É—Ä–æ–≤–Ω—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —à–∞—Ö—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ
        """
        return self.shafts_by_level.get(level, [])
    
    def get_shaft_by_id(self, shaft_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —à–∞—Ö—Ç—ã –ø–æ ID"""
        if self._dirty_cache:
            self._rebuild_cache()
        
        return self._shaft_cache.get(shaft_id)
    
    def get_base_shaft(self, base_shaft_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —à–∞—Ö—Ç—ã"""
        return self.base_shafts.get(base_shaft_id)
    
    def modify_shaft(self, shaft_id: str, modifications: Dict[str, Any]) -> bool:
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞—Ö—Ç—ã
        
        Args:
            shaft_id: ID —à–∞—Ö—Ç—ã
            modifications: –°–ª–æ–≤–∞—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
        Returns:
            True –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        shaft = self.get_shaft_by_id(shaft_id)
        if not shaft:
            return False
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for key, value in modifications.items():
                if key == 'params':
                    shaft['params'].update(value)
                else:
                    shaft[key] = value
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            shaft['params']['BESS_Shaft_Status'] = ShaftStatus.MODIFIED
            shaft['params']['BESS_Modified_At'] = datetime.now().isoformat()
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –≥–µ–æ–º–µ—Ç—Ä–∏—è
            if 'outer_xy_m' in modifications:
                self._compute_shaft_parameters(shaft)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
            if self.cloning_options['sync_modifications']:
                self._sync_shaft_modifications(shaft)
            
            self._dirty_cache = True
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞—Ö—Ç—ã {shaft_id}: {e}")
            return False
    
    def remove_shaft(self, shaft_id: str, level: Optional[str] = None) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —à–∞—Ö—Ç—ã
        
        Args:
            shaft_id: ID —à–∞—Ö—Ç—ã
            level: –£—Ä–æ–≤–µ–Ω—å (–µ—Å–ª–∏ None, —É–¥–∞–ª—è–µ—Ç—Å—è —Å–æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π)
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        removed = False
        
        if level:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if level in self.shafts_by_level:
                self.shafts_by_level[level] = [
                    s for s in self.shafts_by_level[level] 
                    if s.get('id') != shaft_id
                ]
                removed = True
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
            for level_name in self.shafts_by_level:
                original_count = len(self.shafts_by_level[level_name])
                self.shafts_by_level[level_name] = [
                    s for s in self.shafts_by_level[level_name] 
                    if s.get('id') != shaft_id
                ]
                if len(self.shafts_by_level[level_name]) < original_count:
                    removed = True
        
        if removed:
            self._dirty_cache = True
        
        return removed
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —à–∞—Ö—Ç–∞–º"""
        stats = {
            'base_shafts_count': len(self.base_shafts),
            'total_instances': 0,
            'by_level': {},
            'by_type': {},
            'by_status': {},
            'by_size_category': {}
        }
        
        for level, shafts in self.shafts_by_level.items():
            stats['by_level'][level] = len(shafts)
            stats['total_instances'] += len(shafts)
            
            for shaft in shafts:
                params = shaft.get('params', {})
                
                # –ü–æ —Ç–∏–ø–∞–º
                shaft_type = params.get('BESS_Shaft_Type', ShaftType.GENERAL)
                stats['by_type'][shaft_type] = stats['by_type'].get(shaft_type, 0) + 1
                
                # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
                status = params.get('BESS_Shaft_Status', ShaftStatus.ACTIVE)
                stats['by_status'][status] = stats['by_status'].get(status, 0) + 1
                
                # –ü–æ —Ä–∞–∑–º–µ—Ä–∞–º
                size_cat = params.get('BESS_Size_Category', 'UNKNOWN')
                stats['by_size_category'][size_cat] = stats['by_size_category'].get(size_cat, 0) + 1
        
        return stats
    
    def _validate_base_shaft(self, shaft: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —à–∞—Ö—Ç—ã"""
        result = {
            'is_valid': True,
            'is_critical': False,
            'errors': [],
            'warnings': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if 'outer_xy_m' not in shaft or not shaft['outer_xy_m']:
            result['errors'].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—è —à–∞—Ö—Ç—ã (outer_xy_m)")
            result['is_critical'] = True
            result['is_valid'] = False
            return result
        
        coords = shaft['outer_xy_m']
        if len(coords) < 3:
            result['errors'].append("–ö–æ–Ω—Ç—É—Ä —à–∞—Ö—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏")
            result['is_critical'] = True
            result['is_valid'] = False
            return result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—â–∞–¥–∏
        if GEOMETRY_UTILS_AVAILABLE:
            area = abs(polygon_area(coords))
            if area < 0.5:
                result['warnings'].append("–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –ø–ª–æ—â–∞–¥—å —à–∞—Ö—Ç—ã (< 0.5 –º¬≤)")
            elif area > 100.0:
                result['warnings'].append("–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è –ø–ª–æ—â–∞–¥—å —à–∞—Ö—Ç—ã (> 100 –º¬≤)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = shaft.get('params', {})
        shaft_type = params.get('shaft_type')
        if shaft_type and shaft_type not in [ShaftType.ELEVATOR, ShaftType.STAIR, 
                                           ShaftType.VENTILATION, ShaftType.UTILITY,
                                           ShaftType.FIRE_ESCAPE, ShaftType.SMOKE_EXHAUST,
                                           ShaftType.GENERAL]:
            result['warnings'].append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞—Ö—Ç—ã: {shaft_type}")
        
        return result
    
    def _sync_shaft_modifications(self, modified_shaft: Dict):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –¥—Ä—É–≥–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ —à–∞—Ö—Ç—ã"""
        base_shaft_id = modified_shaft.get('params', {}).get('BESS_Base_Shaft_Id')
        if not base_shaft_id or base_shaft_id not in self.shaft_instances:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —É—Ä–æ–≤–Ω–µ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
        sync_params = {}
        exclude_keys = {'BESS_level', 'BESS_Created_At', 'BESS_Modified_At', 'id', 'name'}
        
        for key, value in modified_shaft.get('params', {}).items():
            if key not in exclude_keys:
                sync_params[key] = value
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
        instances = self.shaft_instances[base_shaft_id]
        for level, shaft_id in instances.items():
            if shaft_id != modified_shaft['id']:  # –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
                target_shaft = self.get_shaft_by_id(shaft_id)
                if target_shaft:
                    target_shaft['params'].update(sync_params)
                    target_shaft['params']['BESS_Modified_At'] = datetime.now().isoformat()
    
    def _rebuild_cache(self):
        """–ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        self._shaft_cache.clear()
        
        for level, shafts in self.shafts_by_level.items():
            for shaft in shafts:
                shaft_id = shaft.get('id')
                if shaft_id:
                    self._shaft_cache[shaft_id] = shaft
        
        self._dirty_cache = False
        
    def export_to_state(self, state) -> int:
        """
        –≠–∫—Å–ø–æ—Ä—Ç —à–∞—Ö—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ areas
        
        Args:
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (AppState)
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞—Ö—Ç
        """
        exported_count = 0
        
        try:
            for level, shafts in self.shafts_by_level.items():
                for shaft in shafts:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —à–∞—Ö—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç area –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    area_data = {
                        'id': shaft['id'],
                        'name': shaft['name'],
                        'outer_xy_m': shaft.get('outer_xy_m', []),
                        'inner_loops_xy_m': shaft.get('inner_loops_xy_m', []),
                        'params': shaft.get('params', {})
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —á—Ç–æ —ç—Ç–æ —à–∞—Ö—Ç–∞
                    area_data['params']['BESS_Is_Shaft'] = 'True'
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç
                    existing = next((a for a in state.work_areas if a.get('id') == shaft['id']), None)
                    if not existing:
                        state.work_areas.append(area_data)
                        exported_count += 1
                    
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {exported_count} —à–∞—Ö—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —à–∞—Ö—Ç: {e}")
        
        return exported_count