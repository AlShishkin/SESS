# -*- coding: utf-8 -*-
"""
IntegrationManager - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ BESS_Geometry

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ 
–º–µ–∂–¥—É –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã. –û–Ω —è–≤–ª—è–µ—Ç—Å—è "–¥–∏—Ä–∏–∂–µ—Ä–æ–º" –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏
–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.

–ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏  
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- Fail-safe initialization: —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- Dependency injection: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
- Health monitoring: –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- Graceful degradation: –ø–ª–∞–≤–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
"""

import traceback
from datetime import datetime
from typing import Dict, List, Optional, Any, Callable, Type
from enum import Enum
from dataclasses import dataclass, field


class ComponentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    NOT_FOUND = "not_found"          # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    FOUND = "found"                  # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    INITIALIZING = "initializing"    # –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    READY = "ready"                  # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
    ERROR = "error"                  # –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    DISABLED = "disabled"            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω


class IntegrationLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    BASIC = "basic"           # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π)
    FUNCTIONAL = "functional" # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤)
    FULL = "full"            # –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (—Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏)


@dataclass
class ComponentInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —Å–∏—Å—Ç–µ–º—ã"""
    name: str
    module_path: str
    class_name: Optional[str] = None
    dependencies: List[str] = field(default_factory=list)
    status: ComponentStatus = ComponentStatus.NOT_FOUND
    instance: Any = None
    error_message: Optional[str] = None
    initialization_time: Optional[datetime] = None
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return self.status in [ComponentStatus.READY, ComponentStatus.FOUND]
    
    def is_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫ —Ä–∞–±–æ—Ç–µ"""
        return self.status == ComponentStatus.READY


class IntegrationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ BESS_Geometry
    
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
    """
    
    def __init__(self, main_controller=None):
        self.main_controller = main_controller
        
        # –†–µ–µ—Å—Ç—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.components: Dict[str, ComponentInfo] = {}
        self.integration_level = IntegrationLevel.BASIC
        self.integration_status = {}
        
        # Callbacks –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.event_handlers: Dict[str, List[Callable]] = {
            'component_found': [],
            'component_ready': [],
            'component_error': [],
            'integration_complete': [],
            'integration_failed': []
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.auto_retry_failed = True
        self.max_retry_attempts = 3
        self.component_timeout = 30  # —Å–µ–∫—É–Ω–¥
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–µ—Å—Ç—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_component_registry()
    
    def _initialize_component_registry(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        components_config = [
            {
                'name': 'architectural_tools',
                'module_path': 'core.architectural_tools',
                'class_name': 'ArchitecturalTools',
                'dependencies': []
            },
            {
                'name': 'shaft_manager',
                'module_path': 'core.shaft_manager',
                'class_name': 'ShaftManager',
                'dependencies': []
            },
            {
                'name': 'bess_parameters',
                'module_path': 'core.bess_parameters',
                'class_name': 'BESSParameterManager',
                'dependencies': []
            },
            {
                'name': 'contour_editor',
                'module_path': 'ui.contour_editor',
                'class_name': 'ContourEditor',
                'dependencies': ['geometry_canvas']  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç canvas
            },
            {
                'name': 'geometry_operations',
                'module_path': 'core.geometry_operations',
                'class_name': 'GeometryOperations',
                'dependencies': ['architectural_tools', 'bess_parameters', 'shaft_manager']
            },
            {
                'name': 'editing_modes',
                'module_path': 'core.editing_modes',
                'class_name': 'EditingModeManager',
                'dependencies': ['architectural_tools']
            }
        ]
        
        for config in components_config:
            component = ComponentInfo(
                name=config['name'],
                module_path=config['module_path'],
                class_name=config.get('class_name'),
                dependencies=config.get('dependencies', [])
            )
            self.components[config['name']] = component
    
    def initialize_all_components(self) -> Dict[str, Any]:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        Returns:
            –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ BESS_Geometry...")
        
        results = {
            'start_time': datetime.now(),
            'components': {},
            'integration_level': IntegrationLevel.BASIC,
            'total_components': len(self.components),
            'successful_components': 0,
            'failed_components': 0,
            'warnings': [],
            'errors': []
        }
        
        # –≠—Ç–∞–ø 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\nüìã –≠—Ç–∞–ø 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        discovery_results = self._discover_components()
        results['discovery'] = discovery_results
        
        # –≠—Ç–∞–ø 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\n‚öôÔ∏è –≠—Ç–∞–ø 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        initialization_results = self._initialize_components()
        results['initialization'] = initialization_results
        
        # –≠—Ç–∞–ø 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        print("\nüîó –≠—Ç–∞–ø 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        connection_results = self._setup_component_connections()
        results['connections'] = connection_results
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for component_name, component in self.components.items():
            results['components'][component_name] = {
                'status': component.status.value,
                'available': component.is_available(),
                'ready': component.is_ready(),
                'has_instance': component.instance is not None,
                'error': component.error_message
            }
            
            if component.is_ready():
                results['successful_components'] += 1
            elif component.status == ComponentStatus.ERROR:
                results['failed_components'] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.integration_level = self._determine_integration_level()
        results['integration_level'] = self.integration_level
        results['end_time'] = datetime.now()
        results['duration'] = (results['end_time'] - results['start_time']).total_seconds()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self._generate_integration_report(results)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        if results['successful_components'] >= results['total_components'] * 0.7:  # 70% —É—Å–ø–µ—Ö–∞
            self._fire_event('integration_complete', results)
        else:
            self._fire_event('integration_failed', results)
        
        return results
    
    def _discover_components(self) -> Dict[str, Any]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        discovery_results = {
            'found_components': [],
            'missing_components': [],
            'import_errors': {}
        }
        
        for component_name, component in self.components.items():
            try:
                print(f"  üîç –ü–æ–∏—Å–∫ {component_name}...")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
                module = self._import_module(component.module_path)
                
                if module:
                    component.status = ComponentStatus.FOUND
                    discovery_results['found_components'].append(component_name)
                    print(f"    ‚úÖ {component_name} –Ω–∞–π–¥–µ–Ω")
                    self._fire_event('component_found', {'name': component_name})
                else:
                    component.status = ComponentStatus.NOT_FOUND
                    discovery_results['missing_components'].append(component_name)
                    print(f"    ‚ùå {component_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except ImportError as e:
                component.status = ComponentStatus.ERROR
                component.error_message = str(e)
                discovery_results['import_errors'][component_name] = str(e)
                discovery_results['missing_components'].append(component_name)
                print(f"    ‚ùå {component_name} - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                component.status = ComponentStatus.ERROR
                component.error_message = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
                discovery_results['import_errors'][component_name] = str(e)
                print(f"    ‚ùå {component_name} - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(discovery_results['found_components'])} –∏–∑ {len(self.components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        return discovery_results
    
    def _initialize_components(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        initialization_results = {
            'initialized_components': [],
            'failed_initializations': {},
            'dependency_issues': []
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º (—Å–Ω–∞—á–∞–ª–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ)
        sorted_components = self._sort_components_by_dependencies()
        
        for component_name in sorted_components:
            component = self.components[component_name]
            
            if component.status != ComponentStatus.FOUND:
                continue
            
            try:
                print(f"  ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {component_name}...")
                component.status = ComponentStatus.INITIALIZING
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                if not self._check_dependencies(component):
                    dependency_issue = f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {component_name}: {component.dependencies}"
                    initialization_results['dependency_issues'].append(dependency_issue)
                    print(f"    ‚ö†Ô∏è {dependency_issue}")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                instance = self._create_component_instance(component_name, component)
                
                if instance:
                    component.instance = instance
                    component.status = ComponentStatus.READY
                    component.initialization_time = datetime.now()
                    initialization_results['initialized_components'].append(component_name)
                    print(f"    ‚úÖ {component_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    self._fire_event('component_ready', {'name': component_name, 'instance': instance})
                else:
                    component.status = ComponentStatus.ERROR
                    component.error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä"
                    print(f"    ‚ùå {component_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä")
                    
            except Exception as e:
                component.status = ComponentStatus.ERROR
                component.error_message = str(e)
                initialization_results['failed_initializations'][component_name] = str(e)
                print(f"    ‚ùå {component_name} - –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                self._fire_event('component_error', {'name': component_name, 'error': str(e)})
        
        print(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(initialization_results['initialized_components'])} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        return initialization_results
    
    def _setup_component_connections(self) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        connection_results = {
            'established_connections': [],
            'failed_connections': {},
            'cross_component_features': []
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GeometryOperations —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        if self._is_component_ready('geometry_operations'):
            geom_ops = self.get_component_instance('geometry_operations')
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º BESSParameterManager
            if self._is_component_ready('bess_parameters'):
                bess_params = self.get_component_instance('bess_parameters')
                if hasattr(geom_ops, 'parameter_manager'):
                    geom_ops.parameter_manager = bess_params
                    connection_results['established_connections'].append('geometry_operations -> bess_parameters')
                    print("    üîó GeometryOperations —Å–≤—è–∑–∞–Ω —Å BESSParameterManager")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º ShaftManager
            if self._is_component_ready('shaft_manager'):
                shaft_mgr = self.get_component_instance('shaft_manager')
                if hasattr(geom_ops, 'shaft_manager'):
                    geom_ops.shaft_manager = shaft_mgr
                    connection_results['established_connections'].append('geometry_operations -> shaft_manager')
                    print("    üîó GeometryOperations —Å–≤—è–∑–∞–Ω —Å ShaftManager")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MainController —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        if self.main_controller:
            try:
                self._setup_main_controller_connections()
                connection_results['established_connections'].append('main_controller -> all_components')
                print("    üîó MainController —Å–≤—è–∑–∞–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
            except Exception as e:
                connection_results['failed_connections']['main_controller'] = str(e)
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ MainController: {e}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ContourEditor —Å canvas (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if self._is_component_ready('contour_editor') and self.main_controller:
            try:
                self._setup_contour_editor_connection()
                connection_results['established_connections'].append('contour_editor -> canvas')
                print("    üîó ContourEditor —Å–≤—è–∑–∞–Ω —Å canvas")
            except Exception as e:
                connection_results['failed_connections']['contour_editor'] = str(e)
                print(f"    ‚ö†Ô∏è ContourEditor –Ω–µ —Å–≤—è–∑–∞–Ω —Å canvas: {e}")
        
        print(f"üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: {len(connection_results['established_connections'])}")
        return connection_results
    
    def _import_module(self, module_path: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è"""
        try:
            if module_path.startswith('..'):
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
                module_path = module_path[2:].replace('.', '/')
                from importlib import import_module
                return import_module(module_path)
            else:
                exec(f"import {module_path}")
                return eval(module_path)
        except ImportError:
            return None
        except Exception:
            return None
    
    def _create_component_instance(self, component_name: str, component: ComponentInfo):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if not component.class_name:
            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π)
            return True
        
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if component_name == 'shaft_manager':
                from core.shaft_manager import ShaftManager
                return ShaftManager()
            elif component_name == 'bess_parameters':
                from core.bess_parameters import BESSParameterManager
                return BESSParameterManager()
            elif component_name == 'geometry_operations':
                from core.geometry_operations import GeometryOperations
                state = getattr(self.main_controller, 'state', None) if self.main_controller else None
                return GeometryOperations(state)
            elif component_name == 'editing_modes':
                from core.editing_modes import EditingModeManager
                return EditingModeManager(self.main_controller)
            elif component_name == 'contour_editor':
                # ContourEditor —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å canvas
                return None
            else:
                # –û–±—â–∏–π —Å–ª—É—á–∞–π - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
                module = self._import_module(component.module_path)
                if module and hasattr(module, component.class_name):
                    cls = getattr(module, component.class_name)
                    return cls()
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {component_name}: {e}")
            return None
    
    def _sort_components_by_dependencies(self) -> List[str]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º"""
        sorted_components = []
        remaining_components = set(self.components.keys())
        
        while remaining_components:
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            ready_components = []
            for name in remaining_components:
                component = self.components[name]
                unmet_deps = [dep for dep in component.dependencies if dep in remaining_components]
                if not unmet_deps:
                    ready_components.append(name)
            
            if not ready_components:
                # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–º–µ—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                ready_components = list(remaining_components)
            
            sorted_components.extend(ready_components)
            remaining_components -= set(ready_components)
        
        return sorted_components
    
    def _check_dependencies(self, component: ComponentInfo) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        for dep_name in component.dependencies:
            if dep_name in self.components:
                dep_component = self.components[dep_name]
                if not dep_component.is_ready():
                    return False
            else:
                # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏)
                pass
        return True
    
    def _setup_main_controller_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π MainController —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        if not self.main_controller:
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º ShaftManager
        if self._is_component_ready('shaft_manager'):
            self.main_controller.shaft_manager = self.get_component_instance('shaft_manager')
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º BESSParameterManager
        if self._is_component_ready('bess_parameters'):
            self.main_controller.parameter_manager = self.get_component_instance('bess_parameters')
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º EditingModeManager
        if self._is_component_ready('editing_modes'):
            self.main_controller.editing_mode_manager = self.get_component_instance('editing_modes')
    
    def _setup_contour_editor_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–∏ ContourEditor —Å canvas"""
        if not self.main_controller or not hasattr(self.main_controller, 'canvas_controller'):
            return
        
        canvas_controller = getattr(self.main_controller, 'canvas_controller', None)
        if canvas_controller and hasattr(canvas_controller, 'canvas'):
            from ui.contour_editor import ContourEditor
            contour_editor = ContourEditor(canvas_controller.canvas)
            self.main_controller.contour_editor = contour_editor
            self.components['contour_editor'].instance = contour_editor
            self.components['contour_editor'].status = ComponentStatus.READY
    
    def _determine_integration_level(self) -> IntegrationLevel:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        ready_components = sum(1 for comp in self.components.values() if comp.is_ready())
        total_components = len(self.components)
        
        if ready_components == 0:
            return IntegrationLevel.BASIC
        elif ready_components < total_components * 0.7:
            return IntegrationLevel.FUNCTIONAL
        else:
            return IntegrationLevel.FULL
    
    def _generate_integration_report(self, results: Dict[str, Any]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print(f"\nüìã –û–¢–ß–ï–¢ –û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò BESS_GEOMETRY")
        print(f"{'='*60}")
        print(f"–í—Ä–µ–º—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {results['duration']:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {self.integration_level.value.upper()}")
        print(f"–£—Å–ø–µ—à–Ω–æ: {results['successful_components']}/{results['total_components']} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        print(f"\nüìä –°–¢–ê–¢–£–° –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        for name, info in results['components'].items():
            status_icon = "‚úÖ" if info['ready'] else "‚ö†Ô∏è" if info['available'] else "‚ùå"
            print(f"  {status_icon} {name}: {info['status']}")
            if info['error']:
                print(f"    ‚îî‚îÄ –û—à–∏–±–∫–∞: {info['error']}")
        
        if results.get('warnings'):
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in results['warnings']:
                print(f"  ‚Ä¢ {warning}")
        
        if results.get('errors'):
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in results['errors']:
                print(f"  ‚Ä¢ {error}")
        
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        self._generate_recommendations(results)
    
    def _generate_recommendations(self, results: Dict[str, Any]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        failed_count = results['failed_components']
        
        if failed_count == 0:
            print("  üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        elif failed_count <= 2:
            print("  üîß –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            print("  üìö –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        else:
            print("  üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
            print("  üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            print("  üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        
        if self.integration_level != IntegrationLevel.FULL:
            print("  üéØ –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    
    def _fire_event(self, event_name: str, data: Any):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        if event_name in self.event_handlers:
            for handler in self.event_handlers[event_name]:
                try:
                    handler(data)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è {event_name}: {e}")
    
    # === PUBLIC API ===
    
    def get_component_instance(self, component_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        component = self.components.get(component_name)
        return component.instance if component and component.is_ready() else None
    
    def _is_component_ready(self, component_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        component = self.components.get(component_name)
        return component.is_ready() if component else False
    
    def get_integration_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            'timestamp': datetime.now().isoformat(),
            'integration_level': self.integration_level.value,
            'components': {
                name: {
                    'status': comp.status.value,
                    'available': comp.is_available(),
                    'ready': comp.is_ready(),
                    'has_instance': comp.instance is not None,
                    'dependencies': comp.dependencies,
                    'error': comp.error_message
                }
                for name, comp in self.components.items()
            },
            'summary': {
                'total_components': len(self.components),
                'ready_components': sum(1 for comp in self.components.values() if comp.is_ready()),
                'available_components': sum(1 for comp in self.components.values() if comp.is_available()),
                'error_components': sum(1 for comp in self.components.values() if comp.status == ComponentStatus.ERROR)
            }
        }
    
    def register_event_handler(self, event_name: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        if event_name in self.event_handlers:
            self.event_handlers[event_name].append(handler)
    
    def reload_component(self, component_name: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if component_name not in self.components:
            return False
        
        component = self.components[component_name]
        
        try:
            # –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if component.instance and hasattr(component.instance, 'cleanup'):
                component.instance.cleanup()
            
            component.instance = None
            component.status = ComponentStatus.NOT_FOUND
            component.error_message = None
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            discovery = self._discover_components()
            if component_name in discovery['found_components']:
                initialization = self._initialize_components()
                if component_name in initialization['initialized_components']:
                    return True
            
            return False
            
        except Exception as e:
            component.status = ComponentStatus.ERROR
            component.error_message = str(e)
            return False