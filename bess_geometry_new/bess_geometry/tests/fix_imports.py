#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –≤ BESS_Geometry

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
1. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ IntegrationManager
3. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã –≤ UI –º–æ–¥—É–ª—è—Ö
"""

import sys
import re
from pathlib import Path

def fix_integration_manager():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ IntegrationManager"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï INTEGRATION_MANAGER")
    print("-" * 40)
    
    integration_manager_path = Path('core/integration_manager.py')
    
    if not integration_manager_path.exists():
        print("‚ùå core/integration_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(integration_manager_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        fixes = [
            ('from ..core.architectural_tools import ArchitecturalTools', 
             'from core.architectural_tools import ArchitecturalTools'),
            ('from ..core.shaft_manager import ShaftManager', 
             'from core.shaft_manager import ShaftManager'),
            ('from ..core.bess_parameters import BESSParameterManager', 
             'from core.bess_parameters import BESSParameterManager'),
            ('from ..ui.contour_editor import ContourEditor', 
             'from ui.contour_editor import ContourEditor'),
            ('from ..core.geometry_operations import GeometryOperations', 
             'from core.geometry_operations import GeometryOperations'),
            ('from ..core.editing_modes import EditingModeManager', 
             'from core.editing_modes import EditingModeManager'),
            ("'module_path': '..core.architectural_tools'", 
             "'module_path': 'core.architectural_tools'"),
            ("'module_path': '..core.shaft_manager'", 
             "'module_path': 'core.shaft_manager'"),
            ("'module_path': '..core.bess_parameters'", 
             "'module_path': 'core.bess_parameters'"),
            ("'module_path': '..ui.contour_editor'", 
             "'module_path': 'ui.contour_editor'"),
            ("'module_path': '..core.geometry_operations'", 
             "'module_path': 'core.geometry_operations'"),
            ("'module_path': '..core.editing_modes'", 
             "'module_path': 'core.editing_modes'")
        ]
        
        changes_made = 0
        for old_pattern, new_pattern in fixes:
            if old_pattern in content:
                content = content.replace(old_pattern, new_pattern)
                changes_made += 1
                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {old_pattern[:40]}...")
        
        if changes_made > 0:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = integration_manager_path.with_suffix('.py.backup')
            backup_path.write_text(content, encoding='utf-8')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            integration_manager_path.write_text(content, encoding='utf-8')
            print(f"   ‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω ({changes_made} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)")
            print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        else:
            print("   ‚ÑπÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False

def fix_main_controller():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ MainController"""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï MAIN_CONTROLLER")
    print("-" * 40)
    
    main_controller_path = Path('controllers/main_controller.py')
    
    if not main_controller_path.exists():
        print("‚ùå controllers/main_controller.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(main_controller_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        fixes = [
            ('from ..state import AppState', 'from state import AppState'),
            ('from ..core.spatial_processor import SpatialProcessor', 
             'from core.spatial_processor import SpatialProcessor'),
            ('from ..core.geometry_operations import GeometryOperations', 
             'from core.geometry_operations import GeometryOperations'),
            ('from ..io_bess import load_bess_export', 'from io_bess import load_bess_export'),
            ('from ..performance import PerformanceMonitor', 'from performance import PerformanceMonitor'),
            ('from ..core.architectural_tools import ArchitecturalTools', 
             'from core.architectural_tools import ArchitecturalTools'),
            ('from ..core.shaft_manager import ShaftManager', 
             'from core.shaft_manager import ShaftManager'),
            ('from ..core.bess_parameters import BESSParameterManager', 
             'from core.bess_parameters import BESSParameterManager'),
            ('from ..ui.contour_editor import ContourEditor', 
             'from ui.contour_editor import ContourEditor')
        ]
        
        changes_made = 0
        for old_pattern, new_pattern in fixes:
            if old_pattern in content:
                content = content.replace(old_pattern, new_pattern)
                changes_made += 1
                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {old_pattern[:40]}...")
        
        if changes_made > 0:
            backup_path = main_controller_path.with_suffix('.py.backup')
            main_controller_path.rename(backup_path)
            
            main_controller_path.write_text(content, encoding='utf-8')
            print(f"   ‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω ({changes_made} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)")
            print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        else:
            print("   ‚ÑπÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False

def fix_canvas_controller():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ CanvasController"""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï CANVAS_CONTROLLER")
    print("-" * 40)
    
    canvas_controller_path = Path('controllers/canvas_controller.py')
    
    if not canvas_controller_path.exists():
        print("‚ùå controllers/canvas_controller.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(canvas_controller_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        fixes = [
            ('from ..ui.geometry_canvas import GeometryCanvas', 
             'from ui.geometry_canvas import GeometryCanvas'),
            ('from ..state import AppState', 'from state import AppState'),
            ('from ..geometry_utils import', 'from geometry_utils import'),
            ('from ..performance import', 'from performance import'),
            ('from ..core.', 'from core.'),
            ('from ..ui.', 'from ui.')
        ]
        
        changes_made = 0
        for old_pattern, new_pattern in fixes:
            if old_pattern in content:
                content = content.replace(old_pattern, new_pattern)
                changes_made += 1
                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {old_pattern[:40]}...")
        
        if changes_made > 0:
            backup_path = canvas_controller_path.with_suffix('.py.backup')
            canvas_controller_path.rename(backup_path)
            
            canvas_controller_path.write_text(content, encoding='utf-8')
            print(f"   ‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω ({changes_made} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)")
            print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        else:
            print("   ‚ÑπÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False

def fix_ui_imports():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ UI –º–æ–¥—É–ª—è—Ö"""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï UI –ò–ú–ü–û–†–¢–û–í")
    print("-" * 40)
    
    ui_init_path = Path('ui/__init__.py')
    
    if not ui_init_path.exists():
        print("‚ùå ui/__init__.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(ui_init_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤
        missing_classes = """

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
class CanvasRenderer:
    def __init__(self, *args, **kwargs):
        pass

class VertexManipulator:
    def __init__(self, *args, **kwargs):
        pass

class InteractionHandler:
    def __init__(self, *args, **kwargs):
        pass

class ViewportManager:
    def __init__(self, *args, **kwargs):
        pass

def create_toolbar(*args, **kwargs):
    return None

def create_status_bar(*args, **kwargs):
    return None

def apply_theme(*args, **kwargs):
    pass

def get_ui_colors():
    return {}

def validate_ui_installation():
    return True
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–≥–ª—É—à–µ–∫
        if 'class CanvasRenderer:' not in content:
            content += missing_classes
            
            ui_init_path.write_text(content, encoding='utf-8')
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤")
        else:
            print("   ‚ÑπÔ∏è –ó–∞–≥–ª—É—à–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI: {e}")
        return False

def test_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("-" * 40)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏
    current_dir = Path.cwd()
    sys.path.insert(0, str(current_dir))
    sys.path.insert(0, str(current_dir / 'controllers'))
    sys.path.insert(0, str(current_dir / 'core'))
    sys.path.insert(0, str(current_dir / 'ui'))
    
    tests = [
        ('core.integration_manager', 'IntegrationManager', '–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'),
        ('controllers.main_controller', 'MainController', '–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä'),
        ('controllers.canvas_controller', 'CanvasController', 'Canvas –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä'),
        ('ui.geometry_canvas', 'GeometryCanvas', '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π canvas'),
        ('ui.contour_editor', 'ContourEditor', '–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç—É—Ä–æ–≤')
    ]
    
    successful = 0
    
    for module_path, class_name, description in tests:
        try:
            module = __import__(module_path, fromlist=[class_name])
            cls = getattr(module, class_name)
            print(f"   ‚úÖ {description}")
            successful += 1
        except ImportError as e:
            print(f"   ‚ùå {description}: {e}")
        except AttributeError as e:
            print(f"   ‚ö†Ô∏è {description}: –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"   ‚ùå {description}: {e}")
    
    print(f"\n   üìä –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}/{len(tests)}")
    return successful

def test_integration_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç IntegrationManager –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print("\n‚ö° –¢–ï–°–¢ INTEGRATION_MANAGER")
    print("-" * 40)
    
    try:
        from core.integration_manager import IntegrationManager
        
        manager = IntegrationManager()
        print("   ‚úÖ IntegrationManager —Å–æ–∑–¥–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        results = manager.initialize_all_components()
        successful = results.get('successful_components', 0)
        total = results.get('total_components', 0)
        level = results.get('integration_level', 'unknown')
        
        print(f"   üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {successful}/{total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print(f"   üìä –£—Ä–æ–≤–µ–Ω—å: {level}")
        
        if successful >= total * 0.7:
            print("   üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            return True
        else:
            print("   ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –ò–ú–ü–û–†–¢–ê–ú–ò BESS_GEOMETRY")
    print("=" * 60)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fixes = [
        ("IntegrationManager", fix_integration_manager),
        ("MainController", fix_main_controller),
        ("CanvasController", fix_canvas_controller),
        ("UI –∏–º–ø–æ—Ä—Ç—ã", fix_ui_imports)
    ]
    
    successful_fixes = 0
    
    for fix_name, fix_func in fixes:
        try:
            success = fix_func()
            if success:
                successful_fixes += 1
        except Exception as e:
            print(f"‚ùå {fix_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    successful_tests = test_fixes()
    integration_success = test_integration_manager()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üéØ –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print(f"üîß –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {successful_fixes}/{len(fixes)}")
    print(f"üß™ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/5")
    print(f"‚ö° IntegrationManager: {'‚úÖ' if integration_success else '‚ùå'}")
    
    overall_success = (successful_fixes + successful_tests + (1 if integration_success else 0)) / 8
    
    if overall_success >= 0.8:
        print("\nüéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        print("üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. python tests/correct_structure_test.py")
        print("   2. python examples/integrations_demo.py")
        print("   3. python main_app.py")
        return 0
    elif overall_success >= 0.6:
        print("\nüîß –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print("   –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return 1
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ")
        return 2

if __name__ == '__main__':
    try:
        exit_code = main()
        sys.exit(exit_code)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(3)