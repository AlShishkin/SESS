# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã BESS_Geometry (–ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø PYTHON 3.13)

–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
- –£–±—Ä–∞–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π unittest.makeSuite 
- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Python 3.13
- –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
"""

import unittest
import sys
import os
import traceback
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {project_root}")
print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")


class TestComponentAvailability(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def test_architectural_tools_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ ArchitecturalTools"""
        try:
            from core.architectural_tools import ArchitecturalTools
            self.assertTrue(hasattr(ArchitecturalTools, 'add_void'))
            self.assertTrue(hasattr(ArchitecturalTools, 'add_second_light'))
            print("‚úÖ ArchitecturalTools —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            self.skipTest(f"ArchitecturalTools –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_shaft_manager_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ ShaftManager"""
        try:
            from core.shaft_manager import ShaftManager
            manager = ShaftManager()
            self.assertIsNotNone(manager)
            print("‚úÖ ShaftManager —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            self.skipTest(f"ShaftManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_bess_parameters_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ BESSParameterManager"""
        try:
            from core.bess_parameters import BESSParameterManager, ParameterScope
            manager = BESSParameterManager()
            self.assertIsNotNone(manager)
            print("‚úÖ BESSParameterManager —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            self.skipTest(f"BESSParameterManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_contour_editor_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ ContourEditor"""
        try:
            from ui.contour_editor import ContourEditor, EditingMode, ElementType
            # –ù–µ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑ canvas
            self.assertTrue(True)  # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
            print("‚úÖ ContourEditor —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            self.skipTest(f"ContourEditor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_integration_manager_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ IntegrationManager"""
        try:
            from core.integration_manager import IntegrationManager, ComponentStatus
            manager = IntegrationManager()
            self.assertIsNotNone(manager)
            print("‚úÖ IntegrationManager —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            self.skipTest(f"IntegrationManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


class TestBasicStructure(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def test_project_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            'core/__init__.py',
            'ui/__init__.py', 
            'main_controller.py',
            'geometry_operations.py'
        ]
        
        missing_files = []
        for file_path in required_files:
            full_path = project_root / file_path
            if not full_path.exists():
                missing_files.append(file_path)
        
        if missing_files:
            self.fail(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        else:
            print(f"‚úÖ –í—Å–µ {len(required_files)} –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
    
    def test_core_package_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ core –ø–∞–∫–µ—Ç–∞"""
        try:
            import core
            print("‚úÖ Core –ø–∞–∫–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if hasattr(core, 'get_integration_status'):
                status = core.get_integration_status()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {status}")
            else:
                print("‚ö†Ô∏è get_integration_status –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except ImportError as e:
            self.fail(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å core –ø–∞–∫–µ—Ç: {e}")
    
    def test_ui_package_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ UI –ø–∞–∫–µ—Ç–∞"""
        try:
            import ui
            print("‚úÖ UI –ø–∞–∫–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if hasattr(ui, 'get_ui_integration_status'):
                status = ui.get_ui_integration_status()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å UI: {status}")
            else:
                print("‚ö†Ô∏è get_ui_integration_status –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except ImportError as e:
            self.fail(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å UI –ø–∞–∫–µ—Ç: {e}")


class TestMainControllerIntegration(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.mock_root = None  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Tk –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        
    def test_main_controller_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ MainController"""
        try:
            from main_controller import MainController
            print("‚úÖ MainController —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            self.skipTest(f"MainController –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_main_controller_has_integration_methods(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            from main_controller import MainController
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞)
            expected_methods = [
                'create_void_room',
                'create_second_light', 
                'import_shafts',
                'start_contour_editing',
                'update_element_parameters'
            ]
            
            for method_name in expected_methods:
                if hasattr(MainController, method_name):
                    print(f"‚úÖ {method_name} –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ö†Ô∏è {method_name} –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
        except ImportError as e:
            self.skipTest(f"MainController –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


class TestSimpleIntegration(unittest.TestCase):
    """–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
    
    def test_geometry_operations_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GeometryOperations"""
        try:
            from core.geometry_operations import GeometryOperations
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            geom_ops = GeometryOperations()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            integration_methods = [
                'create_void_element',
                'create_second_light_element',
                'update_element_parameters'
            ]
            
            found_methods = 0
            for method in integration_methods:
                if hasattr(geom_ops, method):
                    found_methods += 1
                    print(f"‚úÖ GeometryOperations.{method} –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ö†Ô∏è GeometryOperations.{method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            print(f"üìä GeometryOperations: {found_methods}/{len(integration_methods)} –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            
        except ImportError as e:
            self.skipTest(f"GeometryOperations –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GeometryOperations: {e}")
    
    def test_integration_manager_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç IntegrationManager"""
        try:
            from core.integration_manager import IntegrationManager
            
            manager = IntegrationManager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            self.assertTrue(hasattr(manager, 'components'))
            self.assertTrue(hasattr(manager, 'integration_level'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
            self.assertTrue(hasattr(manager, 'initialize_all_components'))
            self.assertTrue(hasattr(manager, 'get_integration_report'))
            
            print("‚úÖ IntegrationManager –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except ImportError as e:
            self.skipTest(f"IntegrationManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ IntegrationManager: {e}")


class TestComprehensiveIntegration(unittest.TestCase):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def test_full_integration_status(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\n" + "="*60)
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò BESS_GEOMETRY")
        print("="*60)
        
        results = {
            'core_components': {},
            'ui_components': {},
            'integration_manager': {},
            'main_controller': {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        try:
            import core
            if hasattr(core, 'get_integration_status'):
                core_status = core.get_integration_status()
                results['core_components'] = core_status
                print(f"\nüì¶ Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
                print(f"   –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {core_status.get('integration_level', 'unknown')}")
                print(f"   –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —ç—Ç–∞–ø—É 3: {core_status.get('ready_for_stage3', False)}")
            else:
                print("\nüì¶ Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
                core_modules = ['spatial_processor', 'geometry_operations', 'integration_manager']
                for module in core_modules:
                    try:
                        exec(f"from core.{module} import *")
                        print(f"   ‚úÖ {module}")
                        results['core_components'][module] = True
                    except ImportError:
                        print(f"   ‚ùå {module}")
                        results['core_components'][module] = False
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ core: {e}")
            results['core_components']['error'] = str(e)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        try:
            import ui
            if hasattr(ui, 'get_ui_integration_status'):
                ui_status = ui.get_ui_integration_status()
                results['ui_components'] = ui_status
                print(f"\nüé® UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
                print(f"   –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {ui_status.get('integration_level', 'unknown')}")
                print(f"   –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {ui_status.get('ready_for_contour_editing', False)}")
            else:
                print("\nüé® UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
                try:
                    from ui.geometry_canvas import GeometryCanvas
                    print("   ‚úÖ geometry_canvas")
                    results['ui_components']['geometry_canvas'] = True
                except ImportError:
                    print("   ‚ùå geometry_canvas")
                    results['ui_components']['geometry_canvas'] = False
                    
                try:
                    from ui.contour_editor import ContourEditor
                    print("   ‚úÖ contour_editor")
                    results['ui_components']['contour_editor'] = True
                except ImportError:
                    print("   ‚ùå contour_editor")
                    results['ui_components']['contour_editor'] = False
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ UI: {e}")
            results['ui_components']['error'] = str(e)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º IntegrationManager
        try:
            from core.integration_manager import IntegrationManager
            manager = IntegrationManager()
            
            print(f"\nüîß IntegrationManager:")
            print(f"   –°–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ‚úÖ")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç
            try:
                report = manager.get_integration_report()
                results['integration_manager'] = report
                summary = report.get('summary', {})
                total = summary.get('total_components', 0)
                ready = summary.get('ready_components', 0)
                print(f"   –ì–æ—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {ready}/{total}")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
                results['integration_manager']['report_error'] = str(e)
                
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ IntegrationManager: {e}")
            results['integration_manager']['error'] = str(e)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MainController
        try:
            from main_controller import MainController
            print(f"\nüéÆ MainController:")
            print(f"   –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: ‚úÖ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
            integration_methods = [
                'create_void_room', 'create_second_light', 'import_shafts',
                'start_contour_editing', 'update_element_parameters'
            ]
            
            found = 0
            for method in integration_methods:
                if hasattr(MainController, method):
                    found += 1
            
            print(f"   –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {found}/{len(integration_methods)}")
            results['main_controller']['methods_found'] = found
            results['main_controller']['total_methods'] = len(integration_methods)
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ MainController: {e}")
            results['main_controller']['error'] = str(e)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        self._generate_final_assessment(results)
        
        # –¢–µ—Å—Ç –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç - —ç—Ç–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
        self.assertTrue(True)
    
    def _generate_final_assessment(self, results: Dict[str, Any]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
        print("-" * 40)
        
        total_score = 0
        max_score = 4
        
        # –û—Ü–µ–Ω–∫–∞ core
        core_error = results['core_components'].get('error')
        if not core_error and results['core_components']:
            total_score += 1
            print("‚úÖ Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            print("‚ùå Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        # –û—Ü–µ–Ω–∫–∞ UI
        ui_error = results['ui_components'].get('error') 
        if not ui_error and results['ui_components']:
            total_score += 1
            print("‚úÖ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            print("‚ùå UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        # –û—Ü–µ–Ω–∫–∞ IntegrationManager
        im_error = results['integration_manager'].get('error')
        if not im_error:
            total_score += 1
            print("‚úÖ IntegrationManager —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå IntegrationManager —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        # –û—Ü–µ–Ω–∫–∞ MainController
        mc_error = results['main_controller'].get('error')
        methods_found = results['main_controller'].get('methods_found', 0)
        total_methods = results['main_controller'].get('total_methods', 5)
        
        if not mc_error and methods_found >= total_methods * 0.8:
            total_score += 1
            print("‚úÖ MainController –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        else:
            print("‚ùå MainController —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        percentage = (total_score / max_score) * 100
        print(f"\nüìä –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {percentage:.0f}% ({total_score}/{max_score})")
        
        if percentage >= 75:
            print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        elif percentage >= 50:
            print("üîß –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ß–ê–°–¢–ò–ß–ù–ê–Ø. –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.")
        else:
            print("‚ö†Ô∏è –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if percentage < 75:
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–æ–∞–¥–º–∞–ø–∞")
            print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python examples/integration_demo.py")
        else:
            print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            print("   ‚Ä¢ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å: python main.py")


def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ BESS_Geometry...")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º test suite –≤—Ä—É—á–Ω—É—é (–±–µ–∑ makeSuite)
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
    test_classes = [
        TestComponentAvailability,
        TestBasicStructure, 
        TestMainControllerIntegration,
        TestSimpleIntegration,
        TestComprehensiveIntegration
    ]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        suite.addTests(tests)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    runner = unittest.TextTestRunner(
        verbosity=2, 
        stream=sys.stdout,
        buffer=True  # –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    )
    
    try:
        result = runner.run(suite)
        
        print("\n" + "="*60)
        print(f"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {result.testsRun - len(result.failures) - len(result.errors)}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(result.failures)}")
        print(f"   –û—à–∏–±–æ–∫: {len(result.errors)}")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: {len(result.skipped) if hasattr(result, 'skipped') else 0}")
        
        if result.wasSuccessful():
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return 0
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –°–º. –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
            if result.failures:
                print("\n‚ùå –ù–ï–£–î–ê–ß–ò:")
                for test, traceback in result.failures:
                    print(f"   ‚Ä¢ {test}: {traceback}")
            
            if result.errors:
                print("\nüí• –û–®–ò–ë–ö–ò:")
                for test, traceback in result.errors:
                    print(f"   ‚Ä¢ {test}: {traceback}")
            
            return 1
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–û–í: {e}")
        print(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return 2


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info >= (3, 13):
        print(f"üêç –û–±–Ω–∞—Ä—É–∂–µ–Ω Python {sys.version_info.major}.{sys.version_info.minor} - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º")
    
    exit_code = run_tests()
    print("="*60)
    sys.exit(exit_code)