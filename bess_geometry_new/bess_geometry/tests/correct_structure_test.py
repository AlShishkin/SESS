#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã BESS_Geometry

–£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:
- main_controller.py –≤ controllers/
- geometry_operations.py –≤ core/
- integration_demo.py –∫–∞–∫ integrations_demo.py –≤ examples/
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = Path(__file__).parent.parent  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –∏–∑ tests/ –≤ –∫–æ—Ä–µ–Ω—å
sys.path.insert(0, str(current_dir))

def fix_python_path():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç Python path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê PYTHON PATH")
    print("-" * 40)
    
    paths_to_add = [
        str(current_dir),  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        str(current_dir / 'controllers'),  # –ü–∞–ø–∫–∞ controllers
        str(current_dir / 'core'),  # –ü–∞–ø–∫–∞ core  
        str(current_dir / 'ui'),  # –ü–∞–ø–∫–∞ ui
    ]
    
    for path in paths_to_add:
        if path not in sys.path:
            sys.path.insert(0, path)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {path}")
        else:
            print(f"‚úÖ –£–∂–µ –µ—Å—Ç—å: {path}")

def test_actual_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´")
    print("-" * 40)
    
    tests = [
        # (–º–æ–¥—É–ª—å, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∞—Å—Å/—Ñ—É–Ω–∫—Ü–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ)
        ('state', 'AppState', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'),
        ('geometry_utils', 'centroid_xy', '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—Ç–∏–ª–∏—Ç—ã'),
        ('performance', 'PerformanceMonitor', '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
        ('io_bess', 'load_bess_export', '–ó–∞–≥—Ä—É–∑–∫–∞ BESS —Ñ–∞–π–ª–æ–≤'),
    ]
    
    successful = 0
    
    for module_name, expected_item, description in tests:
        try:
            module = __import__(module_name)
            
            if expected_item and hasattr(module, expected_item):
                print(f"‚úÖ {description} - {expected_item} –Ω–∞–π–¥–µ–Ω")
            elif expected_item:
                print(f"‚ö†Ô∏è {description} - {expected_item} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                # –ü–æ–∫–∞–∂–µ–º —á—Ç–æ –µ—Å—Ç—å
                available = [item for item in dir(module) if not item.startswith('_')]
                if available:
                    print(f"   üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: {', '.join(available[:3])}")
            else:
                print(f"‚úÖ {description} - –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            successful += 1
            
        except ImportError as e:
            print(f"‚ùå {description}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {description}: –æ—à–∏–±–∫–∞ - {e}")
    
    return successful

def test_controllers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã"""
    print("\nüéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í")
    print("-" * 40)
    
    controller_tests = [
        ('controllers', None, 'Controllers –ø–∞–∫–µ—Ç'),
        ('controllers.main_controller', 'MainController', '–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä'),
        ('controllers.canvas_controller', 'CanvasController', 'Canvas –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä'),
        ('controllers.interaction_controller', 'InteractionController', '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π'),
    ]
    
    successful = 0
    
    for module_path, expected_class, description in controller_tests:
        try:
            if '.' in module_path:
                module = __import__(module_path, fromlist=[expected_class or 'dummy'])
            else:
                module = __import__(module_path)
            
            if expected_class:
                if hasattr(module, expected_class):
                    cls = getattr(module, expected_class)
                    print(f"‚úÖ {description} - –∫–ª–∞—Å—Å {expected_class} –Ω–∞–π–¥–µ–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è MainController
                    if expected_class == 'MainController':
                        integration_methods = [
                            'create_void_room', 'create_second_light', 'import_shafts',
                            'start_contour_editing', 'update_element_parameters'
                        ]
                        found_methods = sum(1 for method in integration_methods if hasattr(cls, method))
                        print(f"   üîß –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {found_methods}/{len(integration_methods)}")
                else:
                    print(f"‚ö†Ô∏è {description} - –∫–ª–∞—Å—Å {expected_class} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ")
                    # –ü–æ–∫–∞–∂–µ–º —á—Ç–æ –µ—Å—Ç—å
                    available = [item for item in dir(module) if not item.startswith('_') and not item.islower()]
                    if available:
                        print(f"   üì¶ –ö–ª–∞—Å—Å—ã: {', '.join(available[:3])}")
            else:
                print(f"‚úÖ {description} - –ø–∞–∫–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            successful += 1
            
        except ImportError as e:
            print(f"‚ùå {description}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {description}: –æ—à–∏–±–∫–∞ - {e}")
    
    return successful

def test_core_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CORE –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("-" * 40)
    
    core_tests = [
        ('core', None, 'Core –ø–∞–∫–µ—Ç'),
        ('core.spatial_processor', 'SpatialProcessor', '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä'),
        ('core.geometry_operations', 'GeometryOperations', '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'),
        ('core.architectural_tools', 'ArchitecturalTools', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'),
        ('core.shaft_manager', 'ShaftManager', '–ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞—Ö—Ç'),
        ('core.bess_parameters', 'BESSParameterManager', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã BESS'),
        ('core.integration_manager', 'IntegrationManager', '–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'),
        ('core.editing_modes', 'EditingModeManager', '–†–µ–∂–∏–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'),
    ]
    
    successful = 0
    
    for module_path, expected_class, description in core_tests:
        try:
            if '.' in module_path:
                module = __import__(module_path, fromlist=[expected_class or 'dummy'])
            else:
                module = __import__(module_path)
            
            if expected_class:
                if hasattr(module, expected_class):
                    cls = getattr(module, expected_class)
                    print(f"‚úÖ {description}")
                    
                    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∞—Å—Å–æ–≤
                    try:
                        if expected_class in ['ShaftManager', 'BESSParameterManager', 'IntegrationManager']:
                            instance = cls()
                            print(f"   üéâ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω")
                        elif expected_class == 'ArchitecturalTools':
                            if hasattr(cls, 'add_void') and hasattr(cls, 'add_second_light'):
                                print(f"   üéâ –ú–µ—Ç–æ–¥—ã add_void –∏ add_second_light –Ω–∞–π–¥–µ–Ω—ã")
                        elif expected_class == 'GeometryOperations':
                            # –°–æ–∑–¥–∞–µ–º —Å –ø—É—Å—Ç—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
                            instance = cls()
                            print(f"   üéâ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω")
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω: {e}")
                else:
                    print(f"‚ö†Ô∏è {description} - –∫–ª–∞—Å—Å {expected_class} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    # –ü–æ–∫–∞–∂–µ–º —á—Ç–æ –µ—Å—Ç—å
                    available = [item for item in dir(module) if not item.startswith('_') and item[0].isupper()]
                    if available:
                        print(f"   üì¶ –ö–ª–∞—Å—Å—ã: {', '.join(available[:3])}")
            else:
                print(f"‚úÖ {description} - –ø–∞–∫–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                
                # –î–ª—è core –ø–∞–∫–µ—Ç–∞ –ø–æ–∫–∞–∂–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
                if module_path == 'core':
                    if hasattr(module, 'get_integration_status'):
                        try:
                            status = module.get_integration_status()
                            print(f"   üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {status}")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            successful += 1
            
        except ImportError as e:
            print(f"‚ùå {description}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {description}: –æ—à–∏–±–∫–∞ - {e}")
    
    return successful

def test_ui_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    print("\nüé® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("-" * 40)
    
    ui_tests = [
        ('ui', None, 'UI –ø–∞–∫–µ—Ç'),
        ('ui.geometry_canvas', 'GeometryCanvas', '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π canvas'),
        ('ui.contour_editor', 'ContourEditor', '–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç—É—Ä–æ–≤'),
    ]
    
    successful = 0
    
    for module_path, expected_class, description in ui_tests:
        try:
            if '.' in module_path:
                module = __import__(module_path, fromlist=[expected_class or 'dummy'])
            else:
                module = __import__(module_path)
            
            if expected_class:
                if hasattr(module, expected_class):
                    print(f"‚úÖ {description}")
                    
                    # –î–ª—è ContourEditor –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                    if expected_class == 'ContourEditor':
                        additional_classes = ['EditingMode', 'ElementType', 'EditingState']
                        found_additional = sum(1 for cls_name in additional_classes if hasattr(module, cls_name))
                        print(f"   üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {found_additional}/{len(additional_classes)}")
                else:
                    print(f"‚ö†Ô∏è {description} - –∫–ª–∞—Å—Å {expected_class} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    available = [item for item in dir(module) if not item.startswith('_') and item[0].isupper()]
                    if available:
                        print(f"   üì¶ –ö–ª–∞—Å—Å—ã: {', '.join(available[:3])}")
            else:
                print(f"‚úÖ {description} - –ø–∞–∫–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                
                # –î–ª—è UI –ø–∞–∫–µ—Ç–∞ –ø–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç—É—Å
                if module_path == 'ui':
                    if hasattr(module, 'get_ui_integration_status'):
                        try:
                            status = module.get_ui_integration_status()
                            print(f"   üìä UI —Å—Ç–∞—Ç—É—Å: {status}")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UI —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            successful += 1
            
        except ImportError as e:
            print(f"‚ùå {description}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {description}: –æ—à–∏–±–∫–∞ - {e}")
    
    return successful

def test_examples():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã"""
    print("\nüé¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ú–ï–†–û–í")
    print("-" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º integrations_demo.py (–Ω–µ integration_demo.py)
        from examples.integrations_demo import main as demo_main
        print("‚úÖ integrations_demo –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print("   üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è integrations_demo.py (—Å 's')")
        return 1
    except ImportError as e:
        print(f"‚ùå integrations_demo: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –≤ examples
        try:
            import examples
            available = [item for item in dir(examples) if not item.startswith('_')]
            if available:
                print(f"   üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –≤ examples: {', '.join(available)}")
        except:
            pass
        return 0

def run_integration_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print("\n‚ö° –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢")
    print("-" * 40)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ IntegrationManager –∏ –µ–≥–æ —Ä–∞–±–æ—Ç—É
        from core.integration_manager import IntegrationManager
        
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ IntegrationManager...")
        manager = IntegrationManager()
        print("‚úÖ IntegrationManager —Å–æ–∑–¥–∞–Ω")
        
        print("üîß –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        try:
            results = manager.initialize_all_components()
            successful = results.get('successful_components', 0)
            total = results.get('total_components', 0)
            level = results.get('integration_level', 'unknown')
            
            print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful}/{total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            print(f"üìä –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {level}")
            
            if successful >= total * 0.7:
                print("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                return True
            else:
                print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ IntegrationManager: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ BESS_GEOMETRY")
    print("=" * 60)
    print(f"üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {current_dir}")
    print(f"üêç Python: {sys.version}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏
    fix_python_path()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results = {}
    results['basic'] = test_actual_structure()
    results['controllers'] = test_controllers()
    results['core'] = test_core_components()
    results['ui'] = test_ui_components()
    results['examples'] = test_examples()
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    integration_success = run_integration_test()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 40)
    
    total_successful = sum(results.values())
    total_tests = len(results)
    
    print(f"‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏: {results['basic']}/4")
    print(f"üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã: {results['controllers']}/4") 
    print(f"üîß Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {results['core']}/8")
    print(f"üé® UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {results['ui']}/3")
    print(f"üé¨ –ü—Ä–∏–º–µ—Ä—ã: {results['examples']}/1")
    print(f"‚ö° –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: {'‚úÖ' if integration_success else '‚ùå'}")
    
    success_rate = (total_successful / 20) * 100  # –ü—Ä–∏–º–µ—Ä–Ω–æ 20 —Ç–µ—Å—Ç–æ–≤ –≤—Å–µ–≥–æ
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {success_rate:.0f}%")
    
    if success_rate >= 70 and integration_success:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. python tests/test_integration.py")
        print("   2. python examples/integrations_demo.py")  # –° 's'!
        print("   3. python main_app.py")
        return 0
    elif success_rate >= 50:
        print("üîß –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞")
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python tests/test_integration.py")
        return 1
    else:
        print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –†–ê–ë–û–¢–ê")
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        print("   2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞")
        return 2

if __name__ == '__main__':
    try:
        exit_code = main()
        sys.exit(exit_code)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(3)