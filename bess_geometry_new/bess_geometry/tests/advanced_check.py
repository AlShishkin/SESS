#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ BESS_Geometry —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—É—Ç–µ–π
–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã
"""

import sys
import os
from pathlib import Path

def scan_directory_structure():
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("üîç –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ô")
    print("-" * 50)
    
    current_dir = Path.cwd()
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    
    # –ò—â–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    python_files = {}
    for pattern in ['*.py', '**/*.py']:
        for file_path in current_dir.glob(pattern):
            relative_path = file_path.relative_to(current_dir)
            python_files[str(relative_path)] = file_path
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤:")
    for rel_path, full_path in sorted(python_files.items()):
        size = full_path.stat().st_size if full_path.exists() else 0
        print(f"   üìÑ {rel_path} ({size} –±–∞–π—Ç)")
    
    return python_files

def check_file_locations(python_files):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìç –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–í–´–• –§–ê–ô–õ–û–í")
    print("-" * 50)
    
    key_files = {
        'main_controller.py': 'MainController',
        'geometry_operations.py': 'GeometryOperations', 
        'editing_modes.py': 'EditingModes',
        'core/architectural_tools.py': 'ArchitecturalTools',
        'core/shaft_manager.py': 'ShaftManager',
        'core/bess_parameters.py': 'BESSParameterManager',
        'core/integration_manager.py': 'IntegrationManager',
        'ui/contour_editor.py': 'ContourEditor'
    }
    
    found_files = {}
    
    for target_file, description in key_files.items():
        # –ò—â–µ–º —Ñ–∞–π–ª –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        possible_locations = []
        
        # –ü—Ä—è–º–æ–π –ø—É—Ç—å
        if target_file in python_files:
            possible_locations.append(target_file)
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        filename = Path(target_file).name
        for rel_path in python_files.keys():
            if Path(rel_path).name == filename:
                possible_locations.append(rel_path)
        
        if possible_locations:
            primary_location = possible_locations[0]
            found_files[target_file] = {
                'found': True,
                'location': primary_location,
                'all_locations': possible_locations,
                'description': description
            }
            print(f"   ‚úÖ {description}: {primary_location}")
            if len(possible_locations) > 1:
                print(f"      ‚ö†Ô∏è –¢–∞–∫–∂–µ –Ω–∞–π–¥–µ–Ω –≤: {', '.join(possible_locations[1:])}")
        else:
            found_files[target_file] = {
                'found': False,
                'description': description
            }
            print(f"   ‚ùå {description}: –ù–ï –ù–ê–ô–î–ï–ù ({target_file})")
    
    return found_files

def check_init_files(python_files):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ __init__.py —Ñ–∞–π–ª–æ–≤"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê __init__.py –§–ê–ô–õ–û–í")
    print("-" * 50)
    
    init_files = [path for path in python_files.keys() if path.endswith('__init__.py')]
    
    for init_file in sorted(init_files):
        full_path = python_files[init_file]
        try:
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            size = len(content)
            lines = len(content.splitlines())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            if size == 0:
                print(f"   ‚ö†Ô∏è {init_file}: –ü–£–°–¢–û–ô —Ñ–∞–π–ª")
            elif size < 50:
                print(f"   ‚ö†Ô∏è {init_file}: –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π ({size} –±–∞–π—Ç, {lines} —Å—Ç—Ä–æ–∫)")
            else:
                print(f"   ‚úÖ {init_file}: OK ({size} –±–∞–π—Ç, {lines} —Å—Ç—Ä–æ–∫)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
            if 'import' in content or 'from' in content:
                print(f"      üì• –°–æ–¥–µ—Ä–∂–∏—Ç –∏–º–ø–æ—Ä—Ç—ã")
            else:
                print(f"      ‚ö†Ô∏è –ù–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤")
                
        except Exception as e:
            print(f"   ‚ùå {init_file}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")

def fix_python_path(found_files):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Python path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüîß –ù–ê–°–¢–†–û–ô–ö–ê PYTHON PATH")
    print("-" * 50)
    
    current_dir = Path.cwd()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    current_str = str(current_dir)
    if current_str not in sys.path:
        sys.path.insert(0, current_str)
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ sys.path: {current_str}")
    else:
        print(f"   ‚úÖ –£–∂–µ –≤ sys.path: {current_str}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å __init__.py
    subdirs_with_init = []
    for init_file in Path(current_dir).glob('**/__init__.py'):
        subdir = init_file.parent
        rel_path = subdir.relative_to(current_dir)
        if str(rel_path) != '.':  # –ù–µ –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            subdirs_with_init.append(str(rel_path))
    
    print(f"   üìÇ –ù–∞–π–¥–µ–Ω—ã –ø–∞–∫–µ—Ç—ã: {', '.join(subdirs_with_init) if subdirs_with_init else '–Ω–µ—Ç'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π sys.path
    print(f"   üìç –¢–µ–∫—É—â–∏–π sys.path:")
    for i, path in enumerate(sys.path[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"      {i+1}. {path}")
    if len(sys.path) > 5:
        print(f"      ... –∏ –µ—â–µ {len(sys.path) - 5} –ø—É—Ç–µ–π")

def test_imports_with_fixes(found_files):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ü–û–†–¢–û–í")
    print("-" * 50)
    
    # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    modules_to_test = [
        ('state', 'AppState'),
        ('geometry_utils', 'centroid_xy'),
        ('core', None),
        ('ui', None),
        ('main_controller', 'MainController'),
        ('geometry_operations', 'GeometryOperations')
    ]
    
    successful_imports = 0
    
    for module_name, expected_class in modules_to_test:
        print(f"\n   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {module_name}")
        
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç
        try:
            module = __import__(module_name)
            print(f"      ‚úÖ –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
            
            if expected_class:
                if hasattr(module, expected_class):
                    print(f"      ‚úÖ –ö–ª–∞—Å—Å {expected_class} –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"      ‚ö†Ô∏è –ö–ª–∞—Å—Å {expected_class} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –º–æ–¥—É–ª–µ
                    attrs = [attr for attr in dir(module) if not attr.startswith('_')]
                    if attrs:
                        print(f"      üìã –î–æ—Å—Ç—É–ø–Ω–æ: {', '.join(attrs[:5])}")
            
            successful_imports += 1
            
        except ImportError as e:
            print(f"      ‚ùå –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –∏ –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            if module_name in ['main_controller', 'geometry_operations', 'editing_modes']:
                module_file = f"{module_name}.py"
                if module_file in [Path(p).name for p in found_files.keys()]:
                    try:
                        # –ù–∞–π–¥–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                        for file_path, file_info in found_files.items():
                            if file_info.get('found') and Path(file_path).name == module_file:
                                print(f"      üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑: {file_path}")
                                
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º spec –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                                import importlib.util
                                current_dir = Path.cwd()
                                full_path = current_dir / file_path
                                
                                spec = importlib.util.spec_from_file_location(module_name, full_path)
                                if spec and spec.loader:
                                    module = importlib.util.module_from_spec(spec)
                                    sys.modules[module_name] = module
                                    spec.loader.exec_module(module)
                                    print(f"      ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ importlib")
                                    successful_imports += 1
                                    break
                                break
                    except Exception as e2:
                        print(f"      ‚ùå importlib –∑–∞–≥—Ä—É–∑–∫–∞: {e2}")
    
    print(f"\n   üìä –£—Å–ø–µ—à–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {successful_imports}/{len(modules_to_test)}")
    return successful_imports

def create_missing_files(found_files):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüî® –°–û–ó–î–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –§–ê–ô–õ–û–í")
    print("-" * 50)
    
    missing_files = [file for file, info in found_files.items() if not info['found']]
    
    if not missing_files:
        print("   üéâ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"   üìù –ù–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(missing_files)}")
    
    for missing_file in missing_files:
        print(f"   ‚ùå {missing_file}")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏
    response = input("\n‚ùì –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤? (y/n): ")
    if response.lower() in ['y', 'yes', '–¥–∞', '–¥']:
        create_stubs(missing_files)

def create_stubs(missing_files):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüîß –°–û–ó–î–ê–ù–ò–ï –ó–ê–ì–õ–£–®–ï–ö")
    print("-" * 50)
    
    stubs = {
        'main_controller.py': '''# -*- coding: utf-8 -*-
"""MainController - –∑–∞–≥–ª—É—à–∫–∞"""

class MainController:
    def __init__(self, root_window=None):
        print("MainController: –∑–∞–≥–ª—É—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.root = root_window
        
    def create_void_room(self, *args, **kwargs):
        return {'success': False, 'error': '–ó–∞–≥–ª—É—à–∫–∞ - –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'}
        
    def create_second_light(self, *args, **kwargs):
        return {'success': False, 'error': '–ó–∞–≥–ª—É—à–∫–∞ - –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'}
''',
        
        'geometry_operations.py': '''# -*- coding: utf-8 -*-
"""GeometryOperations - –∑–∞–≥–ª—É—à–∫–∞"""

class GeometryOperations:
    def __init__(self, state=None):
        print("GeometryOperations: –∑–∞–≥–ª—É—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.state = state
''',
        
        'editing_modes.py': '''# -*- coding: utf-8 -*-
"""EditingModes - –∑–∞–≥–ª—É—à–∫–∞"""

class EditingModeManager:
    def __init__(self, controller=None):
        print("EditingModeManager: –∑–∞–≥–ª—É—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.controller = controller
''',
        
        'examples/integration_demo.py': '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Integration Demo - –∑–∞–≥–ª—É—à–∫–∞"""

def main():
    print("üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –∑–∞–≥–ª—É—à–∫–∞")
    print("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
    
if __name__ == '__main__':
    main()
'''
    }
    
    for missing_file in missing_files:
        if missing_file in stubs:
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                file_path = Path(missing_file)
                file_path.parent.mkdir(parents=True, exist_ok=True)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(stubs[missing_file])
                
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {missing_file}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {missing_file}: {e}")

def generate_final_recommendations(python_files, found_files, successful_imports):
    """–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    print("\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 50)
    
    total_key_files = len(found_files)
    found_key_files = sum(1 for info in found_files.values() if info['found'])
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ Python —Ñ–∞–π–ª–æ–≤: {len(python_files)}")
    print(f"   ‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {found_key_files}/{total_key_files}")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {successful_imports}")
    
    if found_key_files >= total_key_files * 0.8 and successful_imports >= 3:
        print("\nüéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:")
        print("   1. python tests/test_integration.py")
        print("   2. python examples/integration_demo.py")
        print("   3. python main.py")
        return "ready"
    
    elif found_key_files >= total_key_files * 0.6:
        print("\nüîß –•–û–†–û–®–û! –ù—É–∂–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏:")
        print("   1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("   2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –≤ __init__.py")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: python tests/test_integration.py")
        return "partial"
    
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –†–ê–ë–û–¢–ê:")
        print("   1. –°–æ–∑–¥–∞–π—Ç–µ –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–æ–≤")
        print("   3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
        return "needs_work"

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BESS_GEOMETRY")
    print("=" * 60)
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
    print(f"üêç Python: {sys.version}")
    print(f"üìç sys.path —Å–æ–¥–µ—Ä–∂–∏—Ç {len(sys.path)} –ø—É—Ç–µ–π")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    python_files = scan_directory_structure()
    found_files = check_file_locations(python_files)
    check_init_files(python_files)
    fix_python_path(found_files)
    successful_imports = test_imports_with_fixes(found_files)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    create_missing_files(found_files)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    status = generate_final_recommendations(python_files, found_files, successful_imports)
    
    return 0 if status == "ready" else 1 if status == "partial" else 2

if __name__ == '__main__':
    try:
        exit_code = main()
        print(f"\n{'='*60}")
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(3)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(4)