#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏
"""

import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / 'controllers'))
sys.path.insert(0, str(current_dir / 'core'))
sys.path.insert(0, str(current_dir / 'ui'))

def test_critical_components():
    """–¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("-" * 40)
    
    # –¢–µ—Å—Ç IntegrationManager
    try:
        from core.integration_manager import IntegrationManager
        manager = IntegrationManager()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        results = manager.initialize_all_components()
        successful = results.get('successful_components', 0)
        total = results.get('total_components', 0)
        
        print(f"‚úÖ IntegrationManager: {successful}/{total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        if successful >= 4:  # –û–∂–∏–¥–∞–µ–º —Ö–æ—Ç—è –±—ã 4 –∏–∑ 6 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            print("   üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            integration_success = True
        else:
            print("   ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
            integration_success = False
            
    except Exception as e:
        print(f"‚ùå IntegrationManager: {e}")
        integration_success = False
    
    # –¢–µ—Å—Ç MainController
    try:
        from controllers.main_controller import MainController
        print("‚úÖ MainController –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ controllers/")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        methods = ['create_void_room', 'create_second_light', 'import_shafts']
        found = sum(1 for method in methods if hasattr(MainController, method))
        print(f"   üîß –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {found}/{len(methods)}")
        main_controller_success = True
        
    except Exception as e:
        print(f"‚ùå MainController: {e}")
        main_controller_success = False
    
    # –¢–µ—Å—Ç CanvasController
    try:
        from controllers.canvas_controller import CanvasController
        print("‚úÖ CanvasController –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        canvas_controller_success = True
    except Exception as e:
        print(f"‚ùå CanvasController: {e}")
        canvas_controller_success = False
    
    return integration_success, main_controller_success, canvas_controller_success

def test_ui_components():
    """–¢–µ—Å—Ç UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüé® –¢–ï–°–¢ UI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("-" * 40)
    
    try:
        from ui.geometry_canvas import GeometryCanvas, CanvasRenderer
        print("‚úÖ GeometryCanvas –∏ CanvasRenderer")
        geometry_canvas_success = True
    except Exception as e:
        print(f"‚ùå GeometryCanvas: {e}")
        geometry_canvas_success = False
    
    try:
        from ui.contour_editor import ContourEditor, VertexManipulator
        print("‚úÖ ContourEditor –∏ VertexManipulator")
        contour_editor_success = True
    except Exception as e:
        print(f"‚ùå ContourEditor: {e}")
        contour_editor_success = False
    
    try:
        import ui
        status = ui.get_ui_integration_status()
        level = status.get('integration_level', 'unknown')
        print(f"‚úÖ UI —Å—Ç–∞—Ç—É—Å: {level}")
        ui_status_success = True
    except Exception as e:
        print(f"‚ùå UI —Å—Ç–∞—Ç—É—Å: {e}")
        ui_status_success = False
    
    return geometry_canvas_success, contour_editor_success, ui_status_success

def test_core_full():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüîß –ü–û–õ–ù–´–ô –¢–ï–°–¢ CORE")
    print("-" * 40)
    
    try:
        import core
        status = core.get_integration_status()
        level = status.get('integration_level', 'unknown')
        ready = status.get('ready_for_stage3', False)
        
        print(f"‚úÖ Core —Å—Ç–∞—Ç—É—Å: {level}")
        print(f"‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —ç—Ç–∞–ø—É 3: {ready}")
        
        return level == 'full' and ready
    except Exception as e:
        print(f"‚ùå Core —Å—Ç–∞—Ç—É—Å: {e}")
        return False

def test_examples():
    """–¢–µ—Å—Ç –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("\nüé¨ –¢–ï–°–¢ –ü–†–ò–ú–ï–†–û–í")
    print("-" * 40)
    
    try:
        from examples.integrations_demo import main as demo_main
        print("‚úÖ integrations_demo –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        return True
    except Exception as e:
        print(f"‚ùå integrations_demo: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –¢–ï–°–¢ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    integration_ok, main_ctrl_ok, canvas_ctrl_ok = test_critical_components()
    geometry_canvas_ok, contour_editor_ok, ui_status_ok = test_ui_components()
    core_ok = test_core_full()
    examples_ok = test_examples()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = [
        integration_ok, main_ctrl_ok, canvas_ctrl_ok,
        geometry_canvas_ok, contour_editor_ok, ui_status_ok,
        core_ok, examples_ok
    ]
    
    successful = sum(results)
    total = len(results)
    success_rate = (successful / total) * 100
    
    print("\n" + "=" * 50)
    print("üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}/{total} ({success_rate:.0f}%)")
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    test_names = [
        "IntegrationManager", "MainController", "CanvasController",
        "GeometryCanvas", "ContourEditor", "UI —Å—Ç–∞—Ç—É—Å",
        "Core –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", "–ü—Ä–∏–º–µ—Ä—ã"
    ]
    
    print("\n–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:")
    for i, (name, result) in enumerate(zip(test_names, results)):
        icon = "‚úÖ" if result else "‚ùå"
        print(f"   {icon} {name}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if success_rate >= 90:
        print("\nüéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!")
        print("üöÄ –ó–ê–ü–£–°–ö–ê–ô–¢–ï:")
        print("   1. python examples/integrations_demo.py")
        print("   2. python main_app.py")
        return 0
    elif success_rate >= 75:
        print("\nüîß –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤–∞")
        print("üöÄ –ú–û–ñ–ï–¢–ï –ó–ê–ü–£–°–ö–ê–¢–¨:")
        print("   1. python examples/integrations_demo.py")
        print("   2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã")
        return 1
    elif success_rate >= 60:
        print("\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í–û")
        print("üîß –ù–£–ñ–ù–û:")
        print("   1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞")
        print("   2. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return 2
    else:
        print("\nüö® –¢–†–ï–ë–£–ï–¢ –†–ê–ë–û–¢–´")
        print("üîß –î–ï–ô–°–¢–í–ò–Ø:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python fix_import_issues.py")
        return 3

if __name__ == '__main__':
    try:
        exit_code = main()
        sys.exit(exit_code)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(4)