# -*- coding: utf-8 -*-
"""
ContourEditor - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç—É—Ä–æ–≤ –¥–ª—è BESS_Geometry

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤:
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω –∏ —Ä–µ–±–µ—Ä
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω –Ω–∞ —Ä–µ–±—Ä–æ (Shift+Click)  
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω (Delete)
‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω drag&drop
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ –∏ –¥—Ä—É–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –û—Ç–º–µ–Ω–∞/–ø–æ–≤—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–†–µ–¥–∞–∫—Ç–æ—Ä —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç
–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, –∑–Ω–∞–∫–æ–º–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö CAD-—Å–∏—Å—Ç–µ–º.
"""

import math
import tkinter as tk
from typing import Dict, List, Optional, Tuple, Set, Any, Callable
from enum import Enum
from dataclasses import dataclass
from copy import deepcopy

# –ò–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from geometry_utils import centroid_xy, bounds, r2, polygon_area, point_in_polygon
    GEOMETRY_UTILS_AVAILABLE = True
except ImportError:
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: geometry_utils –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è contour_editor")
    GEOMETRY_UTILS_AVAILABLE = False
    
    def r2(value): return round(float(value), 2)


class EditingMode(Enum):
    """–†–µ–∂–∏–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–∞"""
    NONE = "none"                    # –ë–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    SELECT_VERTEX = "select_vertex"  # –í—ã–±–æ—Ä –≤–µ—Ä—à–∏–Ω
    MOVE_VERTEX = "move_vertex"      # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã
    ADD_VERTEX = "add_vertex"        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã
    DELETE_VERTEX = "delete_vertex"  # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã
    SELECT_EDGE = "select_edge"      # –í—ã–±–æ—Ä —Ä–µ–±–µ—Ä
    MOVE_CONTOUR = "move_contour"    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞


class ElementType(Enum):
    """–¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç—É—Ä–∞"""
    VERTEX = "vertex"    # –í–µ—Ä—à–∏–Ω–∞
    EDGE = "edge"        # –†–µ–±—Ä–æ
    CONTOUR = "contour"  # –í–µ—Å—å –∫–æ–Ω—Ç—É—Ä


@dataclass
class EditingState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    mode: EditingMode = EditingMode.NONE
    selected_elements: Set[int] = None  # –ò–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    hover_element: Optional[Tuple[ElementType, int]] = None
    drag_start: Optional[Tuple[float, float]] = None
    drag_current: Optional[Tuple[float, float]] = None
    is_dragging: bool = False
    snap_to_grid: bool = True
    grid_size: float = 0.5  # –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    snap_tolerance: float = 0.2  # –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏
    
    def __post_init__(self):
        if self.selected_elements is None:
            self.selected_elements = set()


class ContourEditor:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç—É—Ä–æ–≤ –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤
    —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π CAD-—Å–∏—Å—Ç–µ–º.
    """
    
    def __init__(self, canvas: tk.Canvas):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–Ω—Ç—É—Ä–æ–≤
        
        Args:
            canvas: Tkinter Canvas –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        """
        self.canvas = canvas
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.editing_state = EditingState()
        
        # –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä–∞
        self.contour_coords = []  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (–º–µ—Ç—Ä—ã)
        self.original_coords = []  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã
        self.element_id = None    # ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.visual_settings = {
            'vertex_radius': 4,
            'vertex_color': '#ff6b6b',
            'vertex_selected_color': '#00ff00',
            'vertex_hover_color': '#ffd93d',
            'edge_color': '#4cc9f0',
            'edge_selected_color': '#00ff00',
            'edge_hover_color': '#ffd93d',
            'edge_width': 2,
            'contour_color': '#6b7280',
            'contour_width': 1,
            'grid_color': '#e5e7eb',
            'snap_indicator_color': '#f59e0b'
        }
        
        # –û–±—ä–µ–∫—Ç—ã –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞ canvas
        self.canvas_objects = {
            'vertices': [],
            'edges': [],
            'contour': None,
            'grid': [],
            'snap_indicators': [],
            'selection_box': None
        }
        
        # –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        self.coordinate_system = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑–≤–Ω–µ
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.event_handlers = {
            'vertex_moved': [],
            'vertex_added': [],
            'vertex_deleted': [],
            'contour_modified': [],
            'editing_finished': []
        }
        
        # –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        self.operation_history = []
        self.current_operation_index = -1
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
        self._bind_mouse_events()
        
        print("‚úÖ ContourEditor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_editing(self, element_id: str, coords: List[Tuple[float, float]]):
        """
        –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        
        Args:
            element_id: ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            coords: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ç—É—Ä–∞ –≤ –º–∏—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (–º–µ—Ç—Ä—ã)
        """
        self.element_id = element_id
        self.contour_coords = deepcopy(coords)
        self.original_coords = deepcopy(coords)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.editing_state = EditingState()
        self.editing_state.mode = EditingMode.SELECT_VERTEX
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
        self.operation_history = [deepcopy(coords)]
        self.current_operation_index = 0
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–Ω—Ç—É—Ä
        self._redraw_all()
        
        print(f"üé® –ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {element_id}")
    
    def finish_editing(self, save_changes: bool = True) -> List[Tuple[float, float]]:
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            save_changes: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
            
        Returns:
            –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ç—É—Ä–∞
        """
        if not save_changes:
            self.contour_coords = deepcopy(self.original_coords)
        
        # –û—á–∏—â–∞–µ–º canvas
        self._clear_all_objects()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.editing_state.mode = EditingMode.NONE
        result_coords = deepcopy(self.contour_coords)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        self._fire_event('editing_finished', {
            'element_id': self.element_id,
            'coords': result_coords,
            'changes_saved': save_changes
        })
        
        print(f"üé® –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {self.element_id}")
        
        return result_coords
    
    def set_coordinate_system(self, coord_system):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ pixel <-> meter"""
        self.coordinate_system = coord_system
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –ú–´–®–ò ===
    
    def _bind_mouse_events(self):
        """–ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –∫ canvas"""
        self.canvas.bind('<Button-1>', self._on_mouse_click)
        self.canvas.bind('<B1-Motion>', self._on_mouse_drag)
        self.canvas.bind('<ButtonRelease-1>', self._on_mouse_release)
        self.canvas.bind('<Motion>', self._on_mouse_move)
        self.canvas.bind('<Shift-Button-1>', self._on_shift_click)
        self.canvas.bind('<Delete>', self._on_delete_key)
        self.canvas.bind('<Escape>', self._on_escape_key)
        
        # –§–æ–∫—É—Å –¥–ª—è –∫–ª–∞–≤–∏—à
        self.canvas.focus_set()
    
    def _on_mouse_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –º—ã—à–∏"""
        if self.editing_state.mode == EditingMode.NONE:
            return
        
        canvas_x, canvas_y = event.x, event.y
        world_x, world_y = self._canvas_to_world(canvas_x, canvas_y)
        
        # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        element = self.find_nearest_element(canvas_x, canvas_y, self.contour_coords)
        
        if element:
            element_type, element_index = element
            
            if element_type == ElementType.VERTEX:
                self._handle_vertex_click(element_index, world_x, world_y)
            elif element_type == ElementType.EDGE:
                self._handle_edge_click(element_index, world_x, world_y)
    
    def _on_mouse_drag(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º—ã—à–∏"""
        if self.editing_state.mode != EditingMode.MOVE_VERTEX:
            return
        
        canvas_x, canvas_y = event.x, event.y
        world_x, world_y = self._canvas_to_world(canvas_x, canvas_y)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å–µ—Ç–∫–µ
        if self.editing_state.snap_to_grid:
            world_x, world_y = self._snap_to_grid(world_x, world_y)
        
        self.editing_state.drag_current = (world_x, world_y)
        self.editing_state.is_dragging = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω
        self._update_vertex_positions(world_x, world_y)
        self._redraw_all()
    
    def _on_mouse_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏"""
        if self.editing_state.is_dragging:
            self.editing_state.is_dragging = False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–º–µ–Ω—ã
            self._save_operation()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤–µ—Ä—à–∏–Ω—ã
            self._fire_event('vertex_moved', {
                'element_id': self.element_id,
                'coords': self.contour_coords
            })
    
    def _on_mouse_move(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ (hover —ç—Ñ—Ñ–µ–∫—Ç—ã)"""
        if self.editing_state.mode == EditingMode.NONE:
            return
        
        canvas_x, canvas_y = event.x, event.y
        
        # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        element = self.find_nearest_element(canvas_x, canvas_y, self.contour_coords)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º hover —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        old_hover = self.editing_state.hover_element
        self.editing_state.hover_element = element
        
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –µ—Å–ª–∏ hover –∏–∑–º–µ–Ω–∏–ª—Å—è
        if old_hover != element:
            self._redraw_all()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä
        self._update_cursor(element)
    
    def _on_shift_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Shift+Click –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—à–∏–Ω"""
        canvas_x, canvas_y = event.x, event.y
        world_x, world_y = self._canvas_to_world(canvas_x, canvas_y)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å–µ—Ç–∫–µ
        if self.editing_state.snap_to_grid:
            world_x, world_y = self._snap_to_grid(world_x, world_y)
        
        # –ü–æ–∏—Å–∫ —Ä–µ–±—Ä–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤–µ—Ä—à–∏–Ω—ã
        element = self.find_nearest_element(canvas_x, canvas_y, self.contour_coords)
        
        if element and element[0] == ElementType.EDGE:
            edge_index = element[1]
            self._add_vertex_on_edge(edge_index, world_x, world_y)
    
    def _on_delete_key(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Delete"""
        self._delete_selected_vertices()
    
    def _on_escape_key(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape"""
        self.editing_state.selected_elements.clear()
        self._redraw_all()
    
    # === –û–ü–ï–†–ê–¶–ò–ò –° –í–ï–†–®–ò–ù–ê–ú–ò ===
    
    def _handle_vertex_click(self, vertex_index: int, world_x: float, world_y: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≤–µ—Ä—à–∏–Ω–µ"""
        # Toggle –≤—ã–±–æ—Ä –≤–µ—Ä—à–∏–Ω—ã
        if vertex_index in self.editing_state.selected_elements:
            self.editing_state.selected_elements.remove(vertex_index)
        else:
            self.editing_state.selected_elements.add(vertex_index)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        if self.editing_state.selected_elements:
            self.editing_state.mode = EditingMode.MOVE_VERTEX
            self.editing_state.drag_start = (world_x, world_y)
        
        self._redraw_all()
    
    def _handle_edge_click(self, edge_index: int, world_x: float, world_y: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ä–µ–±—Ä—É"""
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ä–µ–±–µ—Ä
        pass
    
    def _update_vertex_positions(self, world_x: float, world_y: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω"""
        if not self.editing_state.drag_start:
            return
        
        start_x, start_y = self.editing_state.drag_start
        dx = world_x - start_x
        dy = world_y - start_y
        
        for vertex_index in self.editing_state.selected_elements:
            if 0 <= vertex_index < len(self.contour_coords):
                old_x, old_y = self.contour_coords[vertex_index]
                self.contour_coords[vertex_index] = (old_x + dx, old_y + dy)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        self.editing_state.drag_start = (world_x, world_y)
    
    def _add_vertex_on_edge(self, edge_index: int, world_x: float, world_y: float):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã –Ω–∞ —Ä–µ–±—Ä–æ"""
        if 0 <= edge_index < len(self.contour_coords):
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—à–∏–Ω—É –ø–æ—Å–ª–µ edge_index
            insert_index = edge_index + 1
            self.contour_coords.insert(insert_index, (world_x, world_y))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä
            self.editing_state.selected_elements.clear()
            self.editing_state.selected_elements.add(insert_index)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            self._save_operation()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º
            self._fire_event('vertex_added', {
                'element_id': self.element_id,
                'vertex_index': insert_index,
                'coords': self.contour_coords
            })
            
            self._redraw_all()
    
    def _delete_selected_vertices(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω"""
        if not self.editing_state.selected_elements:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–µ—Ä—à–∏–Ω
        if len(self.contour_coords) - len(self.editing_state.selected_elements) < 3:
            print("‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–µ—Ä—à–∏–Ω—ã: –∫–æ–Ω—Ç—É—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏")
            return
        
        # –£–¥–∞–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—ã (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–¥–µ–∫—Å–æ–≤)
        sorted_indices = sorted(self.editing_state.selected_elements, reverse=True)
        for vertex_index in sorted_indices:
            if 0 <= vertex_index < len(self.contour_coords):
                del self.contour_coords[vertex_index]
        
        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        self.editing_state.selected_elements.clear()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        self._save_operation()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º
        self._fire_event('vertex_deleted', {
            'element_id': self.element_id,
            'coords': self.contour_coords
        })
        
        self._redraw_all()
    
    # === –ü–û–ò–°–ö –≠–õ–ï–ú–ï–ù–¢–û–í ===
    
    def find_nearest_element(self, canvas_x: int, canvas_y: int, 
                           polygon: List[Tuple[float, float]]) -> Optional[Tuple[ElementType, int]]:
        """
        –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π –≤–µ—Ä—à–∏–Ω—ã –∏–ª–∏ —Ä–µ–±—Ä–∞ –∫ —Ç–æ—á–∫–µ –Ω–∞ canvas
        
        Args:
            canvas_x, canvas_y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ canvas
            polygon: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞ –≤ –º–∏—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            
        Returns:
            Tuple (—Ç–∏–ø_—ç–ª–µ–º–µ–Ω—Ç–∞, –∏–Ω–¥–µ–∫—Å) –∏–ª–∏ None
        """
        if not polygon or len(polygon) < 3:
            return None
        
        min_distance = float('inf')
        nearest_element = None
        
        # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π –≤–µ—Ä—à–∏–Ω—ã
        for i, (world_x, world_y) in enumerate(polygon):
            pixel_x, pixel_y = self._world_to_canvas(world_x, world_y)
            distance = math.sqrt((canvas_x - pixel_x) ** 2 + (canvas_y - pixel_y) ** 2)
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–µ—Ä—à–∏–Ω–∞–º - –±–æ–ª—å—à–∏–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
            vertex_tolerance = self.visual_settings['vertex_radius'] + 3
            if distance <= vertex_tolerance and distance < min_distance:
                min_distance = distance
                nearest_element = (ElementType.VERTEX, i)
        
        # –ï—Å–ª–∏ –≤–µ—Ä—à–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        if nearest_element:
            return nearest_element
        
        # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–µ–±—Ä–∞
        edge_tolerance = 5  # –ü–∏–∫—Å–µ–ª–∏
        for i in range(len(polygon)):
            j = (i + 1) % len(polygon)
            
            world_x1, world_y1 = polygon[i]
            world_x2, world_y2 = polygon[j]
            
            pixel_x1, pixel_y1 = self._world_to_canvas(world_x1, world_y1)
            pixel_x2, pixel_y2 = self._world_to_canvas(world_x2, world_y2)
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –æ—Ç—Ä–µ–∑–∫–∞
            distance = self._point_to_line_distance(
                canvas_x, canvas_y, pixel_x1, pixel_y1, pixel_x2, pixel_y2
            )
            
            if distance <= edge_tolerance and distance < min_distance:
                min_distance = distance
                nearest_element = (ElementType.EDGE, i)
        
        return nearest_element
    
    def _point_to_line_distance(self, px: float, py: float, 
                              x1: float, y1: float, x2: float, y2: float) -> float:
        """–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –æ—Ç—Ä–µ–∑–∫–∞"""
        # –î–ª–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞
        line_length = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
        if line_length == 0:
            return math.sqrt((px - x1) ** 2 + (py - y1) ** 2)
        
        # –ü—Ä–æ–µ–∫—Ü–∏—è —Ç–æ—á–∫–∏ –Ω–∞ –ø—Ä—è–º—É—é
        t = ((px - x1) * (x2 - x1) + (py - y1) * (y2 - y1)) / (line_length ** 2)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é –æ—Ç—Ä–µ–∑–∫–æ–º
        t = max(0, min(1, t))
        
        # –ë–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ
        closest_x = x1 + t * (x2 - x1)
        closest_y = y1 + t * (y2 - y1)
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        return math.sqrt((px - closest_x) ** 2 + (py - closest_y) ** 2)
    
    # === –ü–†–ò–í–Ø–ó–ö–ò ===
    
    def _snap_to_grid(self, world_x: float, world_y: float) -> Tuple[float, float]:
        """–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ"""
        grid_size = self.editing_state.grid_size
        
        snapped_x = round(world_x / grid_size) * grid_size
        snapped_y = round(world_y / grid_size) * grid_size
        
        return (r2(snapped_x), r2(snapped_y))
    
    # === –û–¢–†–ò–°–û–í–ö–ê ===
    
    def _redraw_all(self):
        """–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        self._clear_all_objects()
        
        if not self.contour_coords:
            return
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–Ω—Ç—É—Ä
        self._draw_contour()
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–µ–±—Ä–∞
        self._draw_edges()
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã
        self._draw_vertices()
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫—É (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if self.editing_state.snap_to_grid:
            self._draw_grid()
    
    def _draw_contour(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞"""
        if len(self.contour_coords) < 3:
            return
        
        canvas_coords = []
        for world_x, world_y in self.contour_coords:
            pixel_x, pixel_y = self._world_to_canvas(world_x, world_y)
            canvas_coords.extend([pixel_x, pixel_y])
        
        contour_obj = self.canvas.create_polygon(
            canvas_coords,
            fill='',
            outline=self.visual_settings['contour_color'],
            width=self.visual_settings['contour_width']
        )
        
        self.canvas_objects['contour'] = contour_obj
    
    def _draw_edges(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–±–µ—Ä"""
        self.canvas_objects['edges'] = []
        
        for i in range(len(self.contour_coords)):
            j = (i + 1) % len(self.contour_coords)
            
            world_x1, world_y1 = self.contour_coords[i]
            world_x2, world_y2 = self.contour_coords[j]
            
            pixel_x1, pixel_y1 = self._world_to_canvas(world_x1, world_y1)
            pixel_x2, pixel_y2 = self._world_to_canvas(world_x2, world_y2)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ä–µ–±—Ä–∞
            color = self.visual_settings['edge_color']
            if (self.editing_state.hover_element and 
                self.editing_state.hover_element[0] == ElementType.EDGE and 
                self.editing_state.hover_element[1] == i):
                color = self.visual_settings['edge_hover_color']
            
            edge_obj = self.canvas.create_line(
                pixel_x1, pixel_y1, pixel_x2, pixel_y2,
                fill=color,
                width=self.visual_settings['edge_width']
            )
            
            self.canvas_objects['edges'].append(edge_obj)
    
    def _draw_vertices(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–µ—Ä—à–∏–Ω"""
        self.canvas_objects['vertices'] = []
        
        for i, (world_x, world_y) in enumerate(self.contour_coords):
            pixel_x, pixel_y = self._world_to_canvas(world_x, world_y)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤–µ—Ä—à–∏–Ω—ã
            color = self.visual_settings['vertex_color']
            if i in self.editing_state.selected_elements:
                color = self.visual_settings['vertex_selected_color']
            elif (self.editing_state.hover_element and 
                  self.editing_state.hover_element[0] == ElementType.VERTEX and 
                  self.editing_state.hover_element[1] == i):
                color = self.visual_settings['vertex_hover_color']
            
            radius = self.visual_settings['vertex_radius']
            vertex_obj = self.canvas.create_oval(
                pixel_x - radius, pixel_y - radius,
                pixel_x + radius, pixel_y + radius,
                fill=color,
                outline='white',
                width=1
            )
            
            self.canvas_objects['vertices'].append(vertex_obj)
    
    def _draw_grid(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∫–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å viewport –∏ –º–∞—Å—à—Ç–∞–±
        pass
    
    def _clear_all_objects(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å canvas"""
        for obj_list in self.canvas_objects.values():
            if isinstance(obj_list, list):
                for obj in obj_list:
                    self.canvas.delete(obj)
                obj_list.clear()
            elif obj_list:
                self.canvas.delete(obj_list)
                
        self.canvas_objects = {key: [] if isinstance(value, list) else None 
                             for key, value in self.canvas_objects.items()}
    
    def _update_cursor(self, element: Optional[Tuple[ElementType, int]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–¥ –º—ã—à—å—é"""
        if not element:
            self.canvas.config(cursor="arrow")
        elif element[0] == ElementType.VERTEX:
            if self.editing_state.mode == EditingMode.MOVE_VERTEX:
                self.canvas.config(cursor="fleur")
            else:
                self.canvas.config(cursor="hand2")
        elif element[0] == ElementType.EDGE:
            self.canvas.config(cursor="crosshair")
    
    # === –°–ò–°–¢–ï–ú–ê –ö–û–û–†–î–ò–ù–ê–¢ ===
    
    def _world_to_canvas(self, world_x: float, world_y: float) -> Tuple[int, int]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ø–∏–∫—Å–µ–ª–∏ canvas"""
        if self.coordinate_system:
            return self.coordinate_system.world_to_canvas(world_x, world_y)
        else:
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
            return (int(world_x * 50), int(world_y * 50))
    
    def _canvas_to_world(self, canvas_x: int, canvas_y: int) -> Tuple[float, float]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∏–∫—Å–µ–ª–µ–π canvas –≤ –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        if self.coordinate_system:
            return self.coordinate_system.canvas_to_world(canvas_x, canvas_y)
        else:
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
            return (r2(canvas_x / 50), r2(canvas_y / 50))
    
    # === –û–¢–ú–ï–ù–ê/–ü–û–í–¢–û–† ===
    
    def _save_operation(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
        # –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        self.operation_history = self.operation_history[:self.current_operation_index + 1]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        self.operation_history.append(deepcopy(self.contour_coords))
        self.current_operation_index += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        max_history = 50
        if len(self.operation_history) > max_history:
            self.operation_history = self.operation_history[-max_history:]
            self.current_operation_index = len(self.operation_history) - 1
    
    def undo(self) -> bool:
        """
        –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        """
        if self.current_operation_index <= 0:
            return False
        
        self.current_operation_index -= 1
        self.contour_coords = deepcopy(self.operation_history[self.current_operation_index])
        self.editing_state.selected_elements.clear()
        
        self._redraw_all()
        
        self._fire_event('contour_modified', {
            'element_id': self.element_id,
            'coords': self.contour_coords,
            'operation': 'undo'
        })
        
        return True
    
    def redo(self) -> bool:
        """
        –ü–æ–≤—Ç–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω
        """
        if self.current_operation_index >= len(self.operation_history) - 1:
            return False
        
        self.current_operation_index += 1
        self.contour_coords = deepcopy(self.operation_history[self.current_operation_index])
        self.editing_state.selected_elements.clear()
        
        self._redraw_all()
        
        self._fire_event('contour_modified', {
            'element_id': self.element_id,
            'coords': self.contour_coords,
            'operation': 'redo'
        })
        
        return True
    
    # === –°–û–ë–´–¢–ò–Ø ===
    
    def add_event_handler(self, event_type: str, handler: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        if event_type in self.event_handlers:
            self.event_handlers[event_type].append(handler)
    
    def remove_event_handler(self, event_type: str, handler: Callable):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        if event_type in self.event_handlers:
            try:
                self.event_handlers[event_type].remove(handler)
            except ValueError:
                pass
    
    def _fire_event(self, event_type: str, event_data: Dict[str, Any]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è"""
        if event_type in self.event_handlers:
            for handler in self.event_handlers[event_type]:
                try:
                    handler(event_data)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
    
    # === –£–¢–ò–õ–ò–¢–´ ===
    
    def validate_contour(self) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        result = {
            'is_valid': True,
            'errors': [],
            'warnings': [],
            'area': 0.0,
            'perimeter': 0.0
        }
        
        if len(self.contour_coords) < 3:
            result['errors'].append("–ö–æ–Ω—Ç—É—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏")
            result['is_valid'] = False
            return result
        
        # –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –∏ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞
        if GEOMETRY_UTILS_AVAILABLE:
            try:
                area = polygon_area(self.contour_coords)
                result['area'] = abs(area)
                
                if area < 0:
                    result['warnings'].append("–ö–æ–Ω—Ç—É—Ä –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é (–ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ)")
                
                if result['area'] < 0.1:
                    result['warnings'].append("–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞")
                
                # –ü–µ—Ä–∏–º–µ—Ç—Ä
                perimeter = 0.0
                for i in range(len(self.contour_coords)):
                    j = (i + 1) % len(self.contour_coords)
                    dx = self.contour_coords[j][0] - self.contour_coords[i][0]
                    dy = self.contour_coords[j][1] - self.contour_coords[i][1]
                    perimeter += math.sqrt(dx * dx + dy * dy)
                
                result['perimeter'] = r2(perimeter)
                
            except Exception as e:
                result['errors'].append(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {e}")
                result['is_valid'] = False
        
        return result
    
    def get_editing_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        return {
            'element_id': self.element_id,
            'mode': self.editing_state.mode.value if self.editing_state.mode else None,
            'vertex_count': len(self.contour_coords),
            'selected_vertices': len(self.editing_state.selected_elements),
            'can_undo': self.current_operation_index > 0,
            'can_redo': self.current_operation_index < len(self.operation_history) - 1,
            'has_changes': self.contour_coords != self.original_coords
        }