# -*- coding: utf-8 -*-
"""
UI –ø–∞–∫–µ—Ç —Å–∏—Å—Ç–µ–º—ã BESS_Geometry (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô)

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –≤–∫–ª—é—á–∞—è
–Ω–æ–≤—ã–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ContourEditor –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤.

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –≠–¢–ê–ü–ê 3:
- ContourEditor: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ArchitecturalTools —á–µ—Ä–µ–∑ UI
- –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã UI:
- –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- Responsiveness: –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- Extensibility: –ª–µ–≥–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- Integration: —Ç–µ—Å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
"""

from datetime import datetime
from typing import Dict, List, Optional, Any, Callable

# === –ò–ú–ü–û–†–¢ –û–°–ù–û–í–ù–û–ì–û –ì–ï–û–ú–ï–¢–†–ò–ß–ï–°–ö–û–ì–û CANVAS ===
try:
    from .geometry_canvas import (
        GeometryCanvas,
        CanvasRenderer,
        InteractionHandler,
        ViewportManager
    )
    GEOMETRY_CANVAS_AVAILABLE = True
    print("‚úÖ GeometryCanvas —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: GeometryCanvas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")
    GEOMETRY_CANVAS_AVAILABLE = False

# === –ù–û–í–´–ô –ò–ú–ü–û–†–¢: CONTOUR EDITOR ===
try:
    from .contour_editor import (
        ContourEditor,
        EditingMode as ContourEditingMode,
        ElementType,
        EditingState,
        VertexManipulator,
        ContourValidator
    )
    CONTOUR_EDITOR_AVAILABLE = True
    print("‚úÖ ContourEditor —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ContourEditor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")
    CONTOUR_EDITOR_AVAILABLE = False

# === –ò–ú–ü–û–†–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• UI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
try:
    from .ui_utils import (
        create_toolbar,
        create_status_bar,
        apply_theme,
        get_ui_colors,
        validate_ui_installation
    )
    UI_UTILS_AVAILABLE = True
    print("‚úÖ UI —É—Ç–∏–ª–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: UI —É—Ç–∏–ª–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - {e}")
    UI_UTILS_AVAILABLE = False

# === –ò–ú–ü–û–†–¢ –î–ò–ê–õ–û–ì–û–í (–ï–°–õ–ò –î–û–°–¢–£–ü–ù–´) ===
try:
    from .dialogs import (
        PropertyEditor,
        LayerManager,
        ExportDialog
    )
    DIALOGS_AVAILABLE = True
    print("‚úÖ –î–∏–∞–ª–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∏–∞–ª–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - {e}")
    DIALOGS_AVAILABLE = False

# === –û–ë–ù–û–í–õ–ï–ù–ù–´–ô PUBLIC API ===
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    'GeometryCanvas',
    'CanvasRenderer',
    'InteractionHandler', 
    'ViewportManager',
    
    # –ù–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢: ContourEditor
    'ContourEditor',
    'ContourEditingMode',
    'ElementType',
    'EditingState',
    'VertexManipulator',
    'ContourValidator',
    
    # UI —É—Ç–∏–ª–∏—Ç—ã
    'create_toolbar',
    'create_status_bar',
    'apply_theme',
    'get_ui_colors',
    'validate_ui_installation',
    
    # –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'create_geometry_canvas',
    'create_contour_editor',
    'create_integrated_ui',
    
    # –£—Ç–∏–ª–∏—Ç—ã
    'get_ui_version',
    'get_ui_integration_status',
    'validate_ui_components'
]

# === –ù–ê–°–¢–†–û–ô–ö–ò UI ===
UI_SETTINGS = {
    'version': '1.3.0',  # –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —ç—Ç–∞–ø–∞ 3
    'theme': 'modern_dark',
    'canvas': {
        'default_zoom': 1.0,
        'max_zoom': 50.0,
        'min_zoom': 0.1,
        'zoom_step': 1.2,
        'grid_enabled': True,
        'snap_enabled': True,
        'snap_distance': 10.0
    },
    'contour_editor': {          # –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø
        'vertex_size': 8,
        'vertex_color': '#FF4444',
        'edge_color': '#44FF44',
        'selected_color': '#FFFF44',
        'preview_color': '#44FFFF',
        'auto_highlight': True,
        'smooth_transitions': True
    },
    'interaction': {
        'double_click_timeout': 500,  # –º—Å
        'drag_threshold': 5,          # –ø–∏–∫—Å–µ–ª–µ–π
        'selection_tolerance': 15,    # –ø–∏–∫—Å–µ–ª–µ–π
        'hover_delay': 200           # –º—Å
    },
    'rendering': {
        'antialiasing': True,
        'high_quality': True,
        'cache_enabled': True,
        'max_cache_size': 1000
    }
}

# === –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def create_geometry_canvas(parent, width=800, height=600, **kwargs):
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GeometryCanvas
    
    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        width: –®–∏—Ä–∏–Ω–∞ canvas
        height: –í—ã—Å–æ—Ç–∞ canvas
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        GeometryCanvas –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    if not GEOMETRY_CANVAS_AVAILABLE:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: GeometryCanvas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return None
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    canvas_settings = UI_SETTINGS['canvas'].copy()
    canvas_settings.update(kwargs)
    
    try:
        canvas = GeometryCanvas(
            parent=parent,
            width=width,
            height=height,
            **canvas_settings
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        if UI_UTILS_AVAILABLE:
            apply_theme(canvas, UI_SETTINGS['theme'])
        
        return canvas
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GeometryCanvas: {e}")
        return None

def create_contour_editor(canvas, **kwargs):
    """
    –ù–û–í–ê–Ø –§–ê–ë–†–ò–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ ContourEditor
    
    Args:
        canvas: –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π canvas –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        ContourEditor –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    if not CONTOUR_EDITOR_AVAILABLE:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ContourEditor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return None
    
    if not canvas:
        print("–û—à–∏–±–∫–∞: –¥–ª—è ContourEditor —Ç—Ä–µ–±—É–µ—Ç—Å—è canvas")
        return None
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    editor_settings = UI_SETTINGS['contour_editor'].copy()
    editor_settings.update(kwargs)
    
    try:
        contour_editor = ContourEditor(
            canvas=canvas,
            **editor_settings
        )
        
        print("‚úÖ ContourEditor —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ canvas")
        return contour_editor
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ContourEditor: {e}")
        return None

def create_integrated_ui(parent, state=None, controller=None):
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ UI
    
    –°–æ–∑–¥–∞–µ—Ç GeometryCanvas —Å ContourEditor –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∏
    –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
    
    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        controller: –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    """
    ui_components = {
        'canvas': None,
        'contour_editor': None,
        'toolbar': None,
        'status_bar': None,
        'success': False
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π canvas
        canvas = create_geometry_canvas(parent)
        if not canvas:
            return ui_components
        
        ui_components['canvas'] = canvas
        
        # –°–æ–∑–¥–∞–µ–º contour editor
        contour_editor = create_contour_editor(canvas)
        if contour_editor:
            ui_components['contour_editor'] = contour_editor
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
            if controller:
                contour_editor.set_completion_callback(
                    controller._on_contour_editing_complete
                )
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã
        if UI_UTILS_AVAILABLE:
            toolbar = create_toolbar(parent, include_contour_tools=True)
            status_bar = create_status_bar(parent)
            
            ui_components['toolbar'] = toolbar
            ui_components['status_bar'] = status_bar
        
        ui_components['success'] = True
        print("üéâ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UI —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ UI: {e}")
    
    return ui_components

# === –£–¢–ò–õ–ò–¢–´ –ü–†–û–í–ï–†–ö–ò –ò –í–ê–õ–ò–î–ê–¶–ò–ò ===

def get_ui_version():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ UI —Å–∏—Å—Ç–µ–º—ã"""
    return UI_SETTINGS['version']

def get_ui_integration_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    return {
        'core_ui': {
            'geometry_canvas': GEOMETRY_CANVAS_AVAILABLE,
            'ui_utils': UI_UTILS_AVAILABLE
        },
        'integrated_ui': {
            'contour_editor': CONTOUR_EDITOR_AVAILABLE,
            'dialogs': DIALOGS_AVAILABLE
        },
        'integration_level': _determine_ui_integration_level(),
        'ready_for_contour_editing': CONTOUR_EDITOR_AVAILABLE and GEOMETRY_CANVAS_AVAILABLE
    }

def _determine_ui_integration_level():
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UI"""
    core_available = GEOMETRY_CANVAS_AVAILABLE
    contour_available = CONTOUR_EDITOR_AVAILABLE
    utils_available = UI_UTILS_AVAILABLE
    
    if core_available and contour_available and utils_available:
        return 'full'
    elif core_available and contour_available:
        return 'functional'
    elif core_available:
        return 'basic'
    else:
        return 'minimal'

def validate_ui_components():
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —ç—Ç–∞–ø–∞ 3
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ UI
    """
    validation = {
        'ui_valid': True,
        'issues': [],
        'warnings': [],
        'recommendations': [],
        'component_tests': {}
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π canvas
    if GEOMETRY_CANVAS_AVAILABLE:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è canvas (mock —Ç–µ—Å—Ç)
            validation['component_tests']['geometry_canvas'] = True
        except Exception as e:
            validation['component_tests']['geometry_canvas'] = False
            validation['issues'].append(f'GeometryCanvas –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è: {e}')
    else:
        validation['ui_valid'] = False
        validation['issues'].append('GeometryCanvas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç UI')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º contour editor
    if CONTOUR_EDITOR_AVAILABLE:
        try:
            validation['component_tests']['contour_editor'] = True
        except Exception as e:
            validation['component_tests']['contour_editor'] = False
            validation['warnings'].append(f'ContourEditor –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã: {e}')
    else:
        validation['warnings'].append('ContourEditor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é canvas + contour editor
    if GEOMETRY_CANVAS_AVAILABLE and CONTOUR_EDITOR_AVAILABLE:
        validation['component_tests']['canvas_contour_integration'] = True
    else:
        validation['component_tests']['canvas_contour_integration'] = False
        validation['warnings'].append('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Canvas + ContourEditor –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not validation['ui_valid']:
        validation['recommendations'].append('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GeometryCanvas –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ UI')
    
    if not CONTOUR_EDITOR_AVAILABLE:
        validation['recommendations'].append('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ContourEditor –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    if _determine_ui_integration_level() != 'full':
        validation['recommendations'].append('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_integrated_ui() –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    
    return validation

def validate_ui_installation():
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ UI (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API)
    
    Returns:
        bool: True –µ—Å–ª–∏ UI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    """
    validation = validate_ui_components()
    return validation['ui_valid']

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –•–ï–õ–ü–ï–†–´ ===

def setup_contour_editing_integration(main_controller, canvas):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤
    
    Args:
        main_controller: –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        canvas: –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π canvas
        
    Returns:
        bool: True –µ—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    """
    if not CONTOUR_EDITOR_AVAILABLE or not canvas:
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º contour editor
        contour_editor = create_contour_editor(canvas)
        if not contour_editor:
            return False
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
        if hasattr(main_controller, 'contour_editor'):
            main_controller.contour_editor = contour_editor
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks
        if hasattr(main_controller, '_on_contour_editing_complete'):
            contour_editor.set_completion_callback(
                main_controller._on_contour_editing_complete
            )
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—É—Ä–æ–≤: {e}")
        return False

def get_ui_capabilities():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö UI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    """
    capabilities = []
    
    if GEOMETRY_CANVAS_AVAILABLE:
        capabilities.extend([
            'geometry_visualization',
            'interactive_navigation', 
            'element_selection',
            'zoom_pan_operations'
        ])
    
    if CONTOUR_EDITOR_AVAILABLE:
        capabilities.extend([
            'contour_editing',
            'vertex_manipulation',
            'edge_modification',
            'geometry_validation'
        ])
    
    if UI_UTILS_AVAILABLE:
        capabilities.extend([
            'toolbar_creation',
            'status_bar',
            'theme_support'
        ])
    
    if DIALOGS_AVAILABLE:
        capabilities.extend([
            'property_editing',
            'layer_management',
            'export_dialogs'
        ])
    
    return capabilities

# === –í–´–í–û–î –°–¢–ê–¢–£–°–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò UI ===
print(f"\nüé® BESS_Geometry UI v{get_ui_version()} - –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")

ui_status = get_ui_integration_status()
print(f"  –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UI: {ui_status['integration_level'].upper()}")
print(f"  –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–Ω—Ç—É—Ä–æ–≤: {'‚úÖ' if ui_status['ready_for_contour_editing'] else '‚ùå'}")

core_ui_ready = all(ui_status['core_ui'].values())
integrated_ui_ready = sum(ui_status['integrated_ui'].values())

print(f"  –û—Å–Ω–æ–≤–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {'‚úÖ' if core_ui_ready else '‚ö†Ô∏è'}")
print(f"  –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {integrated_ui_ready}/2")

capabilities = get_ui_capabilities()
print(f"  –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {len(capabilities)}")

if ui_status['ready_for_contour_editing']:
    print("üéâ UI –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤!")
elif core_ui_ready:
    print("üîß –ë–∞–∑–æ–≤—ã–π UI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
else:
    print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
class CanvasRenderer:
    def __init__(self, *args, **kwargs):
        pass

class VertexManipulator:
    def __init__(self, *args, **kwargs):
        pass

class InteractionHandler:
    def __init__(self, *args, **kwargs):
        pass

class ViewportManager:
    def __init__(self, *args, **kwargs):
        pass

def create_toolbar(*args, **kwargs):
    return None

def create_status_bar(*args, **kwargs):
    return None

def apply_theme(*args, **kwargs):
    pass

def get_ui_colors():
    return {}

def validate_ui_installation():
    return True
