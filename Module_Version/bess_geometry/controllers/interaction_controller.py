# -*- coding: utf-8 -*-
"""
InteractionController - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è SOFT

–≠—Ç–∞–ø 4: "–†–µ–∞–Ω–∏–º–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
–ü–æ—Ä—Ç–∏—Ä—É–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–∑ legacy CanvasController –≤ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É SOFT.

–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
üñ±Ô∏è –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–∫–æ–º (—Å Ctrl/Shift –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
üì¶ Drag-select (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ)
‚ú® –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ (hover –∏ selection)
üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å UI —Ç–∞–±–ª–∏—Ü–∞–º–∏
‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
üéØ Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
"""

import tkinter as tk
import math
from typing import Dict, List, Set, Optional, Tuple, Callable, Any
from enum import Enum
from dataclasses import dataclass
import time

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã SOFT
try:
    from geometry_utils import centroid_xy, bounds, r2, point_in_polygon
except ImportError:
    # Fallback –¥–ª—è case –∫–æ–≥–¥–∞ utils –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    def centroid_xy(points): return (0.0, 0.0) if points else (0.0, 0.0)
    def bounds(points): return (0.0, 0.0, 100.0, 100.0) if points else None
    def r2(value): return round(float(value), 2)
    def point_in_polygon(point, polygon): return False


class InteractionMode(Enum):
    """–†–µ–∂–∏–º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å canvas"""
    SELECTION = "selection"         # –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚≠ê –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
    NAVIGATION = "navigation"       # –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑—É–º
    DRAWING = "drawing"            # –†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    EDITING = "editing"            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    MEASURING = "measuring"        # –ò–∑–º–µ—Ä–µ–Ω–∏—è


class SelectionMode(Enum):
    """–†–µ–∂–∏–º—ã –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    SINGLE = "single"              # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    MULTIPLE = "multiple"          # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π (Ctrl/Shift)
    RECTANGULAR = "rectangular"    # Drag-select –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫


@dataclass
class ElementHitInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ"""
    element_id: str
    element_type: str
    canvas_ids: List[int]
    distance: float = 0.0
    properties: Dict = None


@dataclass
class SelectionState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
    selected_ids: Set[str]
    hover_id: Optional[str] = None
    last_selected: Optional[str] = None
    selection_time: float = 0.0


class InteractionController:
    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è SOFT
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å canvas:
    - –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–ª–∏–∫, drag-select)
    - –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (–ø–æ–¥—Å–≤–µ—Ç–∫–∞, hover)
    - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    - Event-driven: –≤—Å–µ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
    - –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –Ω–æ–≤—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
    - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —É–º–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    
    def __init__(self, canvas_widget: tk.Canvas):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        Args:
            canvas_widget: Tkinter Canvas –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        """
        self.canvas = canvas_widget
        
        # === –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´ ===
        self.interaction_mode = InteractionMode.SELECTION
        self.selection_mode = SelectionMode.SINGLE
        self.selection_state = SelectionState(selected_ids=set())
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑–≤–Ω–µ)
        self.coordinate_system = None
        
        # === –ú–ê–ü–ü–ò–ù–ì –≠–õ–ï–ú–ï–ù–¢–û–í ===
        # canvas_id -> ElementHitInfo
        self.element_mappings: Dict[int, ElementHitInfo] = {}
        # element_id -> List[canvas_id]
        self.element_canvas_map: Dict[str, List[int]] = {}
        
        # === DRAG-SELECT –°–û–°–¢–û–Ø–ù–ò–ï ===
        self.is_dragging = False
        self.drag_start_pos: Optional[Tuple[int, int]] = None
        self.selection_rect: Optional[List[int]] = None  # [x1, y1, x2, y2]
        self.selection_rect_canvas_id: Optional[int] = None
        
        # === HOVER –°–û–°–¢–û–Ø–ù–ò–ï ===
        self.hover_element_id: Optional[str] = None
        self.hover_canvas_ids: List[int] = []
        
        # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
        self.event_handlers = {
            'selection_changed': [],
            'element_clicked': [],
            'element_hover': [],
            'interaction_mode_changed': []
        }
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò ===
        self.colors = {
            'selection': '#00ff00',      # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            'hover': '#ffff00',          # –ñ–µ–ª—Ç—ã–π –¥–ª—è hover
            'drag_select': '#0080ff',    # –°–∏–Ω–∏–π –¥–ª—è drag-select
            'normal': '#000000'          # –ß–µ—Ä–Ω—ã–π –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        }
        
        self.styles = {
            'selection_width': 3,
            'hover_width': 2,
            'drag_select_width': 1,
            'dash_pattern': (5, 5)
        }
        
        # === –ö–≠–® –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
        self.hit_test_cache = {}
        self.last_mouse_pos = (0, 0)
        self.cache_invalidation_time = 0.1  # —Å–µ–∫—É–Ω–¥
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self._setup_event_handlers()
        
        print("‚úÖ InteractionController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def set_coordinate_system(self, coord_system):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        self.coordinate_system = coord_system
    
    def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        # === –°–û–ë–´–¢–ò–Ø –ú–´–®–ò ===
        self.canvas.bind("<Button-1>", self._on_left_click)
        self.canvas.bind("<B1-Motion>", self._on_left_drag)
        self.canvas.bind("<ButtonRelease-1>", self._on_left_release)
        
        self.canvas.bind("<Motion>", self._on_mouse_move)
        self.canvas.bind("<Enter>", self._on_mouse_enter)
        self.canvas.bind("<Leave>", self._on_mouse_leave)
        
        # === –°–û–ë–´–¢–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
        self.canvas.bind("<Key>", self._on_key_press)
        self.canvas.focus_set()  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–∏–µ–º —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        
        print("üñ±Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # ================================
    # –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    # ================================
    
    def _on_left_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–≤–æ–≥–æ –∫–ª–∏–∫–∞ –º—ã—à–∏"""
        if self.interaction_mode == InteractionMode.SELECTION:
            self._handle_selection_click(event)
        elif self.interaction_mode == InteractionMode.DRAWING:
            self._handle_drawing_click(event)
    
    def _on_left_drag(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π"""
        if self.interaction_mode == InteractionMode.SELECTION:
            self._handle_selection_drag(event)
        elif self.interaction_mode == InteractionMode.NAVIGATION:
            self._handle_navigation_drag(event)
    
    def _on_left_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏"""
        if self.is_dragging:
            self._complete_drag_operation(event)
    
    def _on_mouse_move(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        self.last_mouse_pos = (event.x, event.y)
        
        if not self.is_dragging:
            # –û–±–Ω–æ–≤–ª—è–µ–º hover —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ —Ç–∞—â–∏–º
            self._update_hover_state(event.x, event.y)
    
    def _on_mouse_enter(self, event):
        """–ú—ã—à—å –≤–æ—à–ª–∞ –≤ canvas"""
        self.canvas.focus_set()
    
    def _on_mouse_leave(self, event):
        """–ú—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ canvas"""
        self._clear_hover_state()
    
    def _on_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        key = event.keysym.lower()
        
        # Esc - —Å–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if key == 'escape':
            self.clear_selection()
        
        # Delete - —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        elif key == 'delete':
            self._fire_event('elements_delete_requested', {
                'element_ids': list(self.selection_state.selected_ids)
            })
        
        # Ctrl+A - –≤—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ
        elif event.state & 0x4 and key == 'a':  # Ctrl+A
            self._select_all_elements()
        
        # F - –ø–æ–¥–æ–≥–Ω–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–∫–Ω–æ
        elif key == 'f':
            self._fire_event('fit_all_requested', {})
    
    # ================================
    # –û–ë–†–ê–ë–û–¢–ö–ê –í–´–î–ï–õ–ï–ù–ò–Ø
    # ================================
    
    def _handle_selection_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        screen_x, screen_y = event.x, event.y
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
        ctrl_pressed = event.state & 0x4
        shift_pressed = event.state & 0x1
        
        if ctrl_pressed or shift_pressed:
            self.selection_mode = SelectionMode.MULTIPLE
        else:
            self.selection_mode = SelectionMode.SINGLE
        
        # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        hit_info = self._find_element_at_point(screen_x, screen_y)
        
        if hit_info:
            # –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
            self._handle_element_selection(hit_info, ctrl_pressed, shift_pressed)
        else:
            # –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É
            if self.selection_mode == SelectionMode.SINGLE:
                # –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                self.clear_selection()
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º drag-select
                self._start_drag_select(screen_x, screen_y)
    
    def _handle_element_selection(self, hit_info: ElementHitInfo, ctrl: bool, shift: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        element_id = hit_info.element_id
        
        if ctrl:
            # Ctrl - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            if element_id in self.selection_state.selected_ids:
                self.selection_state.selected_ids.remove(element_id)
            else:
                self.selection_state.selected_ids.add(element_id)
        elif shift and self.selection_state.last_selected:
            # Shift - –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã–¥–µ–ª–µ–Ω–∏—è (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
            self.selection_state.selected_ids.add(element_id)
        else:
            # –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ - –∑–∞–º–µ–Ω–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            self.selection_state.selected_ids = {element_id}
        
        self.selection_state.last_selected = element_id
        self.selection_state.selection_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        self._update_selection_display()
        self._fire_selection_changed_event()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∫–ª–∏–∫–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
        self._fire_event('element_clicked', {
            'element_id': element_id,
            'element_type': hit_info.element_type,
            'properties': hit_info.properties,
            'ctrl_pressed': ctrl,
            'shift_pressed': shift
        })
    
    def _handle_selection_drag(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ drag-select"""
        if not self.is_dragging:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        current_x, current_y = event.x, event.y
        if self.drag_start_pos:
            start_x, start_y = self.drag_start_pos
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º)
            min_x = min(start_x, current_x)
            max_x = max(start_x, current_x)
            min_y = min(start_y, current_y)
            max_y = max(start_y, current_y)
            
            self.selection_rect = [min_x, min_y, max_x, max_y]
            
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            self._update_drag_select_rectangle()
    
    def _start_drag_select(self, x: int, y: int):
        """–ù–∞—á–∞–ª–æ drag-select –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.is_dragging = True
        self.drag_start_pos = (x, y)
        self.selection_rect = [x, y, x, y]
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        self.selection_rect_canvas_id = self.canvas.create_rectangle(
            x, y, x, y,
            outline=self.colors['drag_select'],
            fill='',
            width=self.styles['drag_select_width'],
            dash=self.styles['dash_pattern']
        )
    
    def _update_drag_select_rectangle(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ drag-select"""
        if self.selection_rect_canvas_id and self.selection_rect:
            x1, y1, x2, y2 = self.selection_rect
            self.canvas.coords(self.selection_rect_canvas_id, x1, y1, x2, y2)
    
    def _complete_drag_operation(self, event):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag-select –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if not self.is_dragging:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if self.selection_rect:
            selected_ids = self._find_elements_in_rectangle()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if event.state & 0x4:  # Ctrl - –¥–æ–±–∞–≤–ª—è–µ–º –∫ –≤—ã–¥–µ–ª–µ–Ω–∏—é
                self.selection_state.selected_ids.update(selected_ids)
            else:  # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                self.selection_state.selected_ids = selected_ids
            
            self._update_selection_display()
            self._fire_selection_changed_event()
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if self.selection_rect_canvas_id:
            self.canvas.delete(self.selection_rect_canvas_id)
            self.selection_rect_canvas_id = None
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_dragging = False
        self.drag_start_pos = None
        self.selection_rect = None
    
    # ================================
    # HOVER –≠–§–§–ï–ö–¢–´
    # ================================
    
    def _update_hover_state(self, x: int, y: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è hover"""
        hit_info = self._find_element_at_point(x, y)
        
        new_hover_id = hit_info.element_id if hit_info else None
        
        if new_hover_id != self.hover_element_id:
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π hover
            if self.hover_element_id:
                self._remove_hover_highlight(self.hover_element_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π hover
            if new_hover_id:
                self._add_hover_highlight(new_hover_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ hover
                self._fire_event('element_hover', {
                    'element_id': new_hover_id,
                    'element_type': hit_info.element_type,
                    'mouse_pos': (x, y)
                })
            
            self.hover_element_id = new_hover_id
    
    def _clear_hover_state(self):
        """–û—á–∏—Å—Ç–∫–∞ hover —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.hover_element_id:
            self._remove_hover_highlight(self.hover_element_id)
            self.hover_element_id = None
    
    # ================================
    # –ü–û–ò–°–ö –≠–õ–ï–ú–ï–ù–¢–û–í
    # ================================
    
    def _find_element_at_point(self, x: int, y: int) -> Optional[ElementHitInfo]:
        """
        –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
        
        Returns:
            ElementHitInfo –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, None –∏–Ω–∞—á–µ
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ Canvas –¥–ª—è –ø–æ–∏—Å–∫–∞
        canvas_item = self.canvas.find_closest(x, y)[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—à–µ–º –º–∞–ø–ø–∏–Ω–≥–µ
        if canvas_item in self.element_mappings:
            return self.element_mappings[canvas_item]
        
        return None
    
    def _find_elements_in_rectangle(self) -> Set[str]:
        """
        –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ drag-select
        
        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """
        if not self.selection_rect or not self.coordinate_system:
            return set()
        
        screen_x1, screen_y1, screen_x2, screen_y2 = self.selection_rect
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        world_x1, world_y1 = self.coordinate_system.screen_to_world(screen_x1, screen_y2)
        world_x2, world_y2 = self.coordinate_system.screen_to_world(screen_x2, screen_y1)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        min_x, max_x = min(world_x1, world_x2), max(world_x1, world_x2)
        min_y, max_y = min(world_y1, world_y2), max(world_y1, world_y2)
        
        selected_ids = set()
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        for canvas_id, hit_info in self.element_mappings.items():
            # –ü–æ–ª—É—á–∞–µ–º bounding box —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ canvas
            try:
                bbox = self.canvas.bbox(canvas_id)
                if bbox:
                    item_x1, item_y1, item_x2, item_y2 = bbox
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    item_world_x1, item_world_y1 = self.coordinate_system.screen_to_world(item_x1, item_y2)
                    item_world_x2, item_world_y2 = self.coordinate_system.screen_to_world(item_x2, item_y1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                    if (max(min_x, min(item_world_x1, item_world_x2)) < 
                        min(max_x, max(item_world_x1, item_world_x2)) and
                        max(min_y, min(item_world_y1, item_world_y2)) < 
                        min(max_y, max(item_world_y1, item_world_y2))):
                        selected_ids.add(hit_info.element_id)
            except tk.TclError:
                # –≠–ª–µ–º–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ canvas
                continue
        
        return selected_ids
    
    # ================================
    # –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
    # ================================
    
    def _update_selection_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Å—Ç–∏–ª—å
        for canvas_id, hit_info in self.element_mappings.items():
            is_selected = hit_info.element_id in self.selection_state.selected_ids
            self._set_element_selection_style(canvas_id, is_selected)
    
    def _set_element_selection_style(self, canvas_id: int, selected: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            if selected:
                # –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
                self.canvas.itemconfig(canvas_id, 
                    outline=self.colors['selection'],
                    width=self.styles['selection_width'])
            else:
                # –û–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π)
                self.canvas.itemconfig(canvas_id,
                    outline=self.colors['normal'],
                    width=1)
        except tk.TclError:
            # –≠–ª–µ–º–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ canvas
            pass
    
    def _add_hover_highlight(self, element_id: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ hover –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç—É"""
        canvas_ids = self.element_canvas_map.get(element_id, [])
        for canvas_id in canvas_ids:
            if canvas_id not in [cid for cid, info in self.element_mappings.items() 
                               if info.element_id in self.selection_state.selected_ids]:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º hover —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω
                try:
                    self.canvas.itemconfig(canvas_id,
                        outline=self.colors['hover'],
                        width=self.styles['hover_width'])
                except tk.TclError:
                    pass
    
    def _remove_hover_highlight(self, element_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ hover –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        canvas_ids = self.element_canvas_map.get(element_id, [])
        for canvas_id in canvas_ids:
            if canvas_id not in [cid for cid, info in self.element_mappings.items() 
                               if info.element_id in self.selection_state.selected_ids]:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω
                try:
                    self.canvas.itemconfig(canvas_id,
                        outline=self.colors['normal'],
                        width=1)
                except tk.TclError:
                    pass
    
    # ================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–ê–ú–ò
    # ================================
    
    def register_element(self, canvas_ids: List[int], element_id: str, 
                        element_type: str, properties: Dict = None):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        Args:
            canvas_ids: –°–ø–∏—Å–æ–∫ ID canvas –æ–±—ä–µ–∫—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–∞
            element_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–ª–µ–º–µ–Ω—Ç–∞
            element_type: –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ (room, area, opening)
            properties: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        """
        hit_info = ElementHitInfo(
            element_id=element_id,
            element_type=element_type,
            canvas_ids=canvas_ids.copy(),
            properties=properties or {}
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π canvas_id
        for canvas_id in canvas_ids:
            self.element_mappings[canvas_id] = hit_info
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.element_canvas_map[element_id] = canvas_ids.copy()
        
        print(f"üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —ç–ª–µ–º–µ–Ω—Ç {element_id} ({element_type}) —Å {len(canvas_ids)} canvas –æ–±—ä–µ–∫—Ç–∞–º–∏")
    
    def unregister_element(self, element_id: str):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if element_id in self.element_canvas_map:
            canvas_ids = self.element_canvas_map[element_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞–ø–ø–∏–Ω–≥–æ–≤
            for canvas_id in canvas_ids:
                if canvas_id in self.element_mappings:
                    del self.element_mappings[canvas_id]
            
            del self.element_canvas_map[element_id]
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            self.selection_state.selected_ids.discard(element_id)
            
            print(f"üóëÔ∏è –≠–ª–µ–º–µ–Ω—Ç {element_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    def clear_all_elements(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        self.element_mappings.clear()
        self.element_canvas_map.clear()
        self.clear_selection()
        self._clear_hover_state()
        print("üßπ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–∏—â–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # ================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–´–î–ï–õ–ï–ù–ò–ï–ú
    # ================================
    
    def select_elements(self, element_ids: List[str], append: bool = False):
        """
        –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        Args:
            element_ids: –°–ø–∏—Å–æ–∫ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            append: –î–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –≤—ã–¥–µ–ª–µ–Ω–∏—é (True) –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å (False)
        """
        if not append:
            self.selection_state.selected_ids.clear()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        valid_ids = [eid for eid in element_ids if eid in self.element_canvas_map]
        self.selection_state.selected_ids.update(valid_ids)
        
        if valid_ids:
            self.selection_state.last_selected = valid_ids[-1]
            self.selection_state.selection_time = time.time()
        
        self._update_selection_display()
        self._fire_selection_changed_event()
        
        print(f"üìã –í—ã–¥–µ–ª–µ–Ω–æ {len(valid_ids)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ")
    
    def clear_selection(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
        if self.selection_state.selected_ids:
            self.selection_state.selected_ids.clear()
            self.selection_state.last_selected = None
            self._update_selection_display()
            self._fire_selection_changed_event()
            print("üßπ –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
    
    def get_selected_elements(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        return list(self.selection_state.selected_ids)
    
    def _select_all_elements(self):
        """–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        all_ids = list(self.element_canvas_map.keys())
        self.select_elements(all_ids, append=False)
        print(f"üéØ –í—ã–¥–µ–ª–µ–Ω—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã ({len(all_ids)})")
    
    # ================================
    # –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô
    # ================================
    
    def add_event_handler(self, event_type: str, handler: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        if event_type not in self.event_handlers:
            self.event_handlers[event_type] = []
        self.event_handlers[event_type].append(handler)
    
    def remove_event_handler(self, event_type: str, handler: Callable):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        if event_type in self.event_handlers:
            try:
                self.event_handlers[event_type].remove(handler)
            except ValueError:
                pass
    
    def _fire_event(self, event_type: str, data: Dict):
        """–í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è"""
        for handler in self.event_handlers.get(event_type, []):
            try:
                handler(data)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
    
    def _fire_selection_changed_event(self):
        """–í—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
        self._fire_event('selection_changed', {
            'selected_ids': list(self.selection_state.selected_ids),
            'selection_count': len(self.selection_state.selected_ids),
            'last_selected': self.selection_state.last_selected,
            'selection_time': self.selection_state.selection_time
        })
    
    # ================================
    # –†–ï–ñ–ò–ú–´ –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø
    # ================================
    
    def set_interaction_mode(self, mode: InteractionMode):
        """–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        old_mode = self.interaction_mode
        self.interaction_mode = mode
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        if self.is_dragging:
            self._complete_drag_operation(None)
        
        self._fire_event('interaction_mode_changed', {
            'old_mode': old_mode,
            'new_mode': mode
        })
        
        print(f"üéÆ –†–µ–∂–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω: {old_mode.value} ‚Üí {mode.value}")
    
    def get_interaction_mode(self) -> InteractionMode:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        return self.interaction_mode
    
    # ================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ================================
    
    def _handle_drawing_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        print(f"üé® –ö–ª–∏–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è: ({event.x}, {event.y})")
    
    def _handle_navigation_drag(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ drag –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è: ({event.x}, {event.y})")
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        return {
            'registered_elements': len(self.element_canvas_map),
            'canvas_objects': len(self.element_mappings),
            'selected_count': len(self.selection_state.selected_ids),
            'interaction_mode': self.interaction_mode.value,
            'selection_mode': self.selection_mode.value,
            'hover_element': self.hover_element_id,
            'is_dragging': self.is_dragging
        }


# =====================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
# =====================================

def create_interaction_demo():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è InteractionController
    """
    import tkinter as tk
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
    root = tk.Tk()
    root.title("SOFT - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≠—Ç–∞–ø 4")
    root.geometry("800x600")
    
    # –°–æ–∑–¥–∞–µ–º canvas
    canvas = tk.Canvas(root, bg='white')
    canvas.pack(fill='both', expand=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    interaction = InteractionController(canvas)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    def on_selection_changed(data):
        print(f"üéØ –í—ã–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {data['selection_count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print(f"   ID: {data['selected_ids']}")
    
    def on_element_clicked(data):
        print(f"üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: {data['element_id']} ({data['element_type']})")
    
    def on_element_hover(data):
        print(f"üëÜ Hover: {data['element_id']}")
    
    interaction.add_event_handler('selection_changed', on_selection_changed)
    interaction.add_event_handler('element_clicked', on_element_clicked)
    interaction.add_event_handler('element_hover', on_element_hover)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    def create_test_elements():
        # –ö–æ–º–Ω–∞—Ç–∞ 1
        room1_ids = [
            canvas.create_rectangle(50, 50, 200, 150, outline='blue', fill='lightblue'),
            canvas.create_text(125, 100, text="–ö–æ–º–Ω–∞—Ç–∞ 1")
        ]
        interaction.register_element(room1_ids, "room_1", "room", 
                                   {"name": "–ö–æ–º–Ω–∞—Ç–∞ 1", "area": 15.0})
        
        # –ö–æ–º–Ω–∞—Ç–∞ 2  
        room2_ids = [
            canvas.create_rectangle(250, 80, 400, 200, outline='green', fill='lightgreen'),
            canvas.create_text(325, 140, text="–ö–æ–º–Ω–∞—Ç–∞ 2")
        ]
        interaction.register_element(room2_ids, "room_2", "room",
                                   {"name": "–ö–æ–º–Ω–∞—Ç–∞ 2", "area": 22.5})
        
        # –ü—Ä–æ–µ–º
        opening_ids = [
            canvas.create_rectangle(180, 90, 220, 110, outline='red', fill='yellow')
        ]
        interaction.register_element(opening_ids, "opening_1", "opening",
                                   {"name": "–î–≤–µ—Ä—å", "width": 0.9})
    
    # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    root.after(100, create_test_elements)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
    status_bar = tk.Label(root, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", relief='sunken', anchor='w')
    status_bar.pack(side='bottom', fill='x')
    
    def update_status():
        stats = interaction.get_statistics()
        status_text = f"–†–µ–∂–∏–º: {stats['interaction_mode']} | " \
                     f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤: {stats['registered_elements']} | " \
                     f"–í—ã–¥–µ–ª–µ–Ω–æ: {stats['selected_count']}"
        if stats['hover_element']:
            status_text += f" | Hover: {stats['hover_element']}"
        status_bar.config(text=status_text)
        root.after(100, update_status)
    
    update_status()
    
    print("üöÄ –î–µ–º–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
    print("   ‚Ä¢ –ö–ª–∏–∫–∞—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º")
    print("   ‚Ä¢ Ctrl+–∫–ª–∏–∫ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞")  
    print("   ‚Ä¢ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è drag-select")
    print("   ‚Ä¢ –ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
    print("   ‚Ä¢ Escape –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è")
    print("   ‚Ä¢ Ctrl+A –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö")
    
    return root, interaction

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
    root, interaction = create_interaction_demo()
    root.mainloop()