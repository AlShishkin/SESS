# -*- coding: utf-8 -*-
"""
state.py - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è BESS_Geometry

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 'AppState' object has no attribute 'set_source'

–≠–¢–ê–ü 1: –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è AppState —Å –º–µ—Ç–æ–¥–æ–º set_source()
"""

import json
import threading
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass, field
from datetime import datetime
from pathlib import Path
from copy import deepcopy
import uuid


@dataclass
class UserPreferences:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    theme: str = "default"
    language: str = "ru"
    auto_save_enabled: bool = True
    auto_save_interval: int = 300  # —Å–µ–∫—É–Ω–¥—ã
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    show_grid: bool = True
    grid_size: float = 1.0  # –º–µ—Ç—Ä—ã
    snap_to_grid: bool = True
    snap_tolerance: float = 0.1  # –º–µ—Ç—Ä—ã
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    max_visible_elements: int = 5000
    use_render_cache: bool = True
    cache_size: int = 1000
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
    colors: Dict[str, str] = field(default_factory=lambda: {
        'room_fill': '#4cc9f0',
        'room_outline': '#333333',
        'area_fill': '#ff6b6b', 
        'area_outline': '#666666',
        'opening_fill': '#ffd93d',
        'opening_outline': '#333333',
        'selected_outline': '#00ff00',
        'background': '#ffffff',
        'grid': '#e0e0e0'
    })
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    units: str = "metric"  # "metric" –∏–ª–∏ "imperial"
    coordinate_precision: int = 2  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π


class StateChangeEvent:
    """–°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    
    def __init__(self, path: str, old_value: Any, new_value: Any, source: str = "unknown"):
        self.path = path
        self.old_value = old_value
        self.new_value = new_value
        self.source = source
        self.timestamp = datetime.now()
        self.event_id = str(uuid.uuid4())


class AppState:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è BESS_Geometry
    
    –≠–¢–ê–ü 1: –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–µ—Ç–æ–¥–æ–º set_source() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º
    """
    
    def __init__(self, config_dir: Optional[Path] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            config_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        print("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AppState")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        self.meta = {}
        self.base_levels = {}  # –ò—Å—Ö–æ–¥–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        self.selected_level = ""
        
        # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (source) - –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        self.source_rooms = []
        self.source_areas = []
        self.source_openings = []
        self.source_shafts = {}
        
        # –†–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ (work) - –∏–∑–º–µ–Ω—è–µ–º—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.work_rooms = []
        self.work_areas = []
        self.work_openings = []
        self.work_shafts = {}
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.selected_elements = set()
        self.clipboard = []
        self.undo_stack = []
        self.redo_stack = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.preferences = UserPreferences()
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_modified = False
        self.last_saved = None
        self.current_file_path = None
        
        # –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
        self._event_listeners = {}
        self._lock = threading.Lock()
        
        print("‚úÖ AppState –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def set_source(self, meta: Dict, levels: Dict, rooms: List, areas: List, openings: List, shafts: Dict):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (source data)
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã.
        –†–∞–±–æ—á–∏–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            meta: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            levels: –£—Ä–æ–≤–Ω–∏ –∑–¥–∞–Ω–∏—è {name: elevation}
            rooms: –°–ø–∏—Å–æ–∫ –ø–æ–º–µ—â–µ–Ω–∏–π
            areas: –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π
            openings: –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π
            shafts: –®–∞—Ö—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º {level: [shafts]}
        """
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ AppState")
        
        with self._lock:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.meta = deepcopy(meta) if meta else {}
            self.base_levels = deepcopy(levels) if levels else {}
            self.source_rooms = deepcopy(rooms) if rooms else []
            self.source_areas = deepcopy(areas) if areas else []
            self.source_openings = deepcopy(openings) if openings else []
            self.source_shafts = deepcopy(shafts) if shafts else {}
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ –∫–æ–ø–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.work_rooms = deepcopy(self.source_rooms)
            self.work_areas = deepcopy(self.source_areas)
            self.work_openings = deepcopy(self.source_openings)
            self.work_shafts = deepcopy(self.source_shafts)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            if self.base_levels:
                self.selected_level = next(iter(self.base_levels.keys()))
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.selected_elements.clear()
            self.clipboard.clear()
            self.undo_stack.clear()
            self.redo_stack.clear()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            self._normalize_elements()
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ (—Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ)
            self.is_modified = False
            
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {len(self.work_rooms)} –ø–æ–º–µ—â–µ–Ω–∏–π, {len(self.work_areas)} –æ–±–ª–∞—Å—Ç–µ–π, {len(self.work_openings)} –æ—Ç–≤–µ—Ä—Å—Ç–∏–π")
        print(f"üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: {list(self.base_levels.keys())}")
        print(f"üìç –í—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {self.selected_level}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
        self._fire_event('data_loaded', {
            'rooms_count': len(self.work_rooms),
            'areas_count': len(self.work_areas),
            'openings_count': len(self.work_openings),
            'levels': list(self.base_levels.keys())
        })
    
    def _normalize_elements(self):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        print("üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è
        for room in self.work_rooms:
            self._normalize_element(room, 'room')
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–ª–∞—Å—Ç–∏
        for area in self.work_areas:
            self._normalize_element(area, 'area')
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏—è
        for opening in self.work_openings:
            self._normalize_element(opening, 'opening')
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —à–∞—Ö—Ç—ã
        for level, shafts in self.work_shafts.items():
            for shaft in shafts:
                self._normalize_element(shaft, 'shaft')
    
    def _normalize_element(self, element: Dict, element_type: str):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if not isinstance(element, dict):
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
        if 'element_type' not in element:
            element['element_type'] = element_type
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID
        if 'id' not in element:
            element['id'] = self.unique_id(f"{element_type}_{len(self.work_rooms) + len(self.work_areas) + len(self.work_openings)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏
        if 'name' not in element:
            element['name'] = element['id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
        if 'outer_xy_m' not in element:
            element['outer_xy_m'] = []
        
        if 'inner_loops_xy_m' not in element:
            element['inner_loops_xy_m'] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if 'params' not in element:
            element['params'] = {}
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        if 'BESS_level' not in element['params']:
            element['params']['BESS_level'] = self.selected_level or 'Level 1'
    
    def unique_id(self, base_name: str = "element") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
        
        Args:
            base_name: –ë–∞–∑–æ–≤–æ–µ –∏–º—è –¥–ª—è ID
            
        Returns:
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        """
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID
        existing_ids = set()
        
        for room in self.work_rooms:
            existing_ids.add(room.get('id', ''))
        
        for area in self.work_areas:
            existing_ids.add(area.get('id', ''))
        
        for opening in self.work_openings:
            existing_ids.add(opening.get('id', ''))
        
        for shafts in self.work_shafts.values():
            for shaft in shafts:
                existing_ids.add(shaft.get('id', ''))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        counter = 1
        while True:
            candidate_id = f"{base_name}_{counter}"
            if candidate_id not in existing_ids:
                return candidate_id
            counter += 1
    
    def get_current_level_elements(self) -> Dict[str, List]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏: {'rooms': [...], 'areas': [...], 'openings': [...]}
        """
        current_level = self.selected_level
        
        rooms = [r for r in self.work_rooms 
                if r.get('params', {}).get('BESS_level', '') == current_level]
        
        areas = [a for a in self.work_areas 
                if a.get('params', {}).get('BESS_level', '') == current_level]
        
        openings = [o for o in self.work_openings 
                   if o.get('params', {}).get('BESS_level', '') == current_level]
        
        return {
            'rooms': rooms,
            'areas': areas,
            'openings': openings
        }
    
    def set_selected_level(self, level_name: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        
        Args:
            level_name: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        """
        if level_name in self.base_levels:
            old_level = self.selected_level
            self.selected_level = level_name
            
            print(f"üìç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: {level_name}")
            
            # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è
            self.selected_elements.clear()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è
            self._fire_event('level_changed', {
                'old_level': old_level,
                'new_level': level_name
            })
    
    def mark_modified(self):
        """–û—Ç–º–µ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ"""
        self.is_modified = True
        self._fire_event('state_modified', {'modified': True})
    
    def mark_saved(self):
        """–û—Ç–º–µ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ"""
        self.is_modified = False
        self.last_saved = datetime.now()
        self._fire_event('state_saved', {'saved_at': self.last_saved})
    
    def add_event_listener(self, event_type: str, callback):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        """
        if event_type not in self._event_listeners:
            self._event_listeners[event_type] = []
        self._event_listeners[event_type].append(callback)
    
    def remove_event_listener(self, event_type: str, callback):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π"""
        if event_type in self._event_listeners:
            try:
                self._event_listeners[event_type].remove(callback)
            except ValueError:
                pass
    
    def _fire_event(self, event_type: str, data: Dict = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è"""
        if event_type in self._event_listeners:
            for callback in self._event_listeners[event_type]:
                try:
                    callback(data or {})
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return {
            'rooms_count': len(self.work_rooms),
            'areas_count': len(self.work_areas),
            'openings_count': len(self.work_openings),
            'levels_count': len(self.base_levels),
            'selected_elements_count': len(self.selected_elements),
            'is_modified': self.is_modified,
            'current_level': self.selected_level,
            'last_saved': self.last_saved.isoformat() if self.last_saved else None
        }
    
    def save_to_file(self, filepath: str):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª
        
        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        try:
            from io_bess import save_work_geometry
            
            save_work_geometry(
                filepath,
                self.meta,
                self.base_levels,
                self.work_rooms,
                self.work_areas,
                self.work_openings,
                self.work_shafts
            )
            
            self.current_file_path = filepath
            self.mark_saved()
            
            print(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {filepath}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            raise
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è AppState")
        
        with self._lock:
            self.meta.clear()
            self.base_levels.clear()
            self.selected_level = ""
            
            self.source_rooms.clear()
            self.source_areas.clear()
            self.source_openings.clear()
            self.source_shafts.clear()
            
            self.work_rooms.clear()
            self.work_areas.clear()
            self.work_openings.clear()
            self.work_shafts.clear()
            
            self.selected_elements.clear()
            self.clipboard.clear()
            self.undo_stack.clear()
            self.redo_stack.clear()
            
            self.is_modified = False
            self.last_saved = None
            self.current_file_path = None
        
        self._fire_event('state_cleared', {})


# –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º
ALIAS_TO_PARAM = {
    # –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤
    'room_color': 'preferences.colors.room_fill',
    'area_color': 'preferences.colors.area_fill',
    'opening_color': 'preferences.colors.opening_fill',
    'selected_color': 'preferences.colors.selected_outline',
    'background_color': 'preferences.colors.background',
    
    # –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏
    'scale': 'viewport.scale',
    'center_x': 'viewport.center_x',
    'center_y': 'viewport.center_y',
    
    # –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
    'mode': 'edit_mode',
    'level': 'current_level',
    
    # –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    'cache_enabled': 'preferences.use_render_cache',
    'cache_size': 'preferences.cache_size',
    'max_elements': 'preferences.max_visible_elements'
}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
_global_app_state: Optional[AppState] = None
_state_lock = threading.Lock()


def get_app_state() -> AppState:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global _global_app_state
    
    if _global_app_state is None:
        with _state_lock:
            if _global_app_state is None:
                _global_app_state = AppState()
    
    return _global_app_state


def initialize_app_state(config_dir: Optional[Path] = None) -> AppState:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Args:
        config_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    global _global_app_state
    
    with _state_lock:
        _global_app_state = AppState(config_dir)
    
    return _global_app_state


def reset_app_state() -> None:
    """–°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global _global_app_state
    
    with _state_lock:
        _global_app_state = None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
def create_test_state() -> AppState:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Returns:
        AppState —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    
    app_state = AppState()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    meta = {
        "version": "bess-test-1.0",
        "project": {"name": "Test Building", "description": "Test data for –≠–¢–ê–ü 1"}
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
    levels = {
        "Level 1": 0.0,
        "Level 2": 3.5
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è
    rooms = [
        {
            "id": "room_1",
            "name": "–û—Ñ–∏—Å 1",
            "outer_xy_m": [[0, 0], [5, 0], [5, 3], [0, 3], [0, 0]],
            "inner_loops_xy_m": [],
            "params": {"BESS_level": "Level 1"},
            "area_m2": 15.0
        },
        {
            "id": "room_2",
            "name": "–û—Ñ–∏—Å 2", 
            "outer_xy_m": [[6, 0], [10, 0], [10, 3], [6, 3], [6, 0]],
            "inner_loops_xy_m": [],
            "params": {"BESS_level": "Level 1"},
            "area_m2": 12.0
        },
        {
            "id": "room_3",
            "name": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª",
            "outer_xy_m": [[0, 4], [10, 4], [10, 8], [0, 8], [0, 4]],
            "inner_loops_xy_m": [],
            "params": {"BESS_level": "Level 1"},
            "area_m2": 40.0
        }
    ]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    app_state.set_source(meta, levels, rooms, [], [], {})
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    return app_state


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è state"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ state –º–æ–¥—É–ª—è")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    test_state = create_test_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = test_state.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
    for key, value in stats.items():
        print(f"  ‚Ä¢ {key}: {value}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É —É—Ä–æ–≤–Ω—è
    test_state.set_selected_level("Level 2")
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É—Ä–æ–≤–Ω—è
    elements = test_state.get_current_level_elements()
    print(f"üìç –≠–ª–µ–º–µ–Ω—Ç—ã Level 2: {len(elements['rooms'])} –ø–æ–º–µ—â–µ–Ω–∏–π")
    
    test_state.set_selected_level("Level 1")
    elements = test_state.get_current_level_elements()
    print(f"üìç –≠–ª–µ–º–µ–Ω—Ç—ã Level 1: {len(elements['rooms'])} –ø–æ–º–µ—â–µ–Ω–∏–π")
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")